diff --git a/base/trace_event/BUILD.gn b/base/trace_event/BUILD.gn
index 64c76da38cb950166799b832a9710440374bffeb..5e05821aded2bb8cae0c505e676e75edfc2bf119 100644
--- a/base/trace_event/BUILD.gn
+++ b/base/trace_event/BUILD.gn
@@ -26,6 +26,7 @@ source_set("trace_event") {
     "process_memory_totals.h",
     "process_memory_totals_dump_provider.cc",
     "process_memory_totals_dump_provider.h",
+    "trace_config.h",
     "trace_config.cc",
     "trace_config.h",
     "trace_event.h",
@@ -45,6 +46,8 @@ source_set("trace_event") {
     "trace_event_system_stats_monitor.h",
     "trace_event_win.cc",
     "trace_event_win.h",
+    "tracking_control_trace.cc",
+    "tracking_control_trace.h",
     "winheap_dump_provider_win.cc",
     "winheap_dump_provider_win.h",
   ]
diff --git a/base/trace_event/trace_event.gypi b/base/trace_event/trace_event.gypi
index b595004da62286aa53a4a3c19ebe793283891102..2adf01228d41ec517d3c0c8b8f7b6327bbfa7869 100644
--- a/base/trace_event/trace_event.gypi
+++ b/base/trace_event/trace_event.gypi
@@ -45,6 +45,8 @@
       'trace_event/trace_event_system_stats_monitor.h',
       'trace_event/trace_event_win.cc',
       'trace_event/trace_event_win.h',
+      'trace_event/tracking_control_trace.cc',
+      'trace_event/tracking_control_trace.h',
       'trace_event/winheap_dump_provider_win.cc',
       'trace_event/winheap_dump_provider_win.h',
     ],
diff --git a/base/trace_event/tracking_control_trace.cc b/base/trace_event/tracking_control_trace.cc
new file mode 100644
index 0000000000000000000000000000000000000000..342d6cc18ba326af14eb7cfbae54b86d431123fe
--- /dev/null
+++ b/base/trace_event/tracking_control_trace.cc
@@ -0,0 +1,84 @@
+#include <iostream>
+#include <fstream>
+#include <sstream>
+#include "base/trace_event/tracking_control_trace.h"
+
+#if defined(OS_MACOSX)
+#include <mach/clock.h>
+#include <mach/mach.h>
+#endif // defined(OS_MACOSX)
+
+using namespace base;
+
+TrackingControlTrace* TrackingControlTrace::m_instance = 0;
+
+TrackingControlTrace::TrackingControlTrace() {
+}
+
+timespec TrackingControlTrace::Diff(timespec start, timespec end) {
+  timespec temp;
+  if ((end.tv_nsec-start.tv_nsec)<0) {
+    temp.tv_sec = end.tv_sec-start.tv_sec-1;
+    temp.tv_nsec = 1000000000+end.tv_nsec-start.tv_nsec;
+  } else {
+    temp.tv_sec = end.tv_sec-start.tv_sec;
+    temp.tv_nsec = end.tv_nsec-start.tv_nsec;
+  }
+  return temp;
+}
+
+void TrackingControlTrace::Trace(std::string tag) {
+  struct timespec ts;
+#if defined(OS_MACOSX)
+  clock_serv_t cclock;
+  mach_timespec_t mts;
+  host_get_clock_service(mach_host_self(), CALENDAR_CLOCK, &cclock);
+  clock_get_time(cclock, &mts);
+  mach_port_deallocate(mach_task_self(), cclock);
+  ts.tv_sec = mts.tv_sec;
+  ts.tv_nsec = mts.tv_nsec;
+#else
+  clock_gettime(CLOCK_REALTIME, &ts);
+#endif // defined(OS_MACOSX)
+  m_events.push_back(std::make_pair(tag, ts));
+}
+
+TrackingControlTrace* TrackingControlTrace::GetInstance() {
+  // FIXME: THIS IS NOT THREAD SAFE
+  if (!m_instance) {
+    m_instance = new TrackingControlTrace();
+  }
+  return m_instance;
+}
+
+void TrackingControlTrace::Flush() {
+  assert(!m_instance);
+
+  if (m_events.empty()) {
+    return;
+  }
+  
+  int count=0;
+
+  std::ofstream logfile;
+
+  std::ostringstream os;
+  os << getpid();
+  std::string file_name = "/tmp/priv-browser-" + os.str();
+  logfile.open(file_name.c_str(),
+               std::ios_base::app);
+
+  for (std::vector<std::pair<std::string, struct timespec> >::iterator it = m_events.begin(); 
+       it != m_events.end(); ++it) {
+    struct timespec this_ts = it->second;
+    std::ostringstream os;
+    os << getpid() << " ,  #" << count++ << " , ";
+    os << it->first << " , ";
+    os << this_ts.tv_sec << ":" << this_ts.tv_nsec;
+    std::cerr << os.str() << std::endl;
+    logfile << os.str() << std::endl;
+  }
+
+  // always clear up the event vector.
+  m_events.clear();
+}
diff --git a/base/trace_event/tracking_control_trace.h b/base/trace_event/tracking_control_trace.h
new file mode 100644
index 0000000000000000000000000000000000000000..29ce0ffada32aacfac5af4a41f674454dc851661
--- /dev/null
+++ b/base/trace_event/tracking_control_trace.h
@@ -0,0 +1,33 @@
+#ifndef TRACKING_CONTROL_TRACE_H
+#define TRACKING_CONTROL_TRACE_H
+
+#include <vector>
+
+#include "base/logging.h"
+#include "base/base_export.h"
+
+#define TMON_TRACE(tag)                                         \
+  base::TrackingControlTrace::GetInstance()->Trace(tag);
+
+#define TMON_TRACE_FLUSH()                                      \
+  base::TrackingControlTrace::GetInstance()->Flush();
+
+namespace base {
+
+class BASE_EXPORT TrackingControlTrace {
+
+public:
+  static timespec Diff(timespec start, timespec end);
+  void Trace(std::string tag);
+  void Flush();
+  static TrackingControlTrace* GetInstance();
+  ~TrackingControlTrace();
+
+private:
+  TrackingControlTrace();
+  std::vector<std::pair<std::string, struct timespec> > m_events;
+  static TrackingControlTrace* m_instance;
+};
+}
+
+#endif // TRACKING_CONTROL_TRACE_H
diff --git a/chrome/app/chrome_command_ids.h b/chrome/app/chrome_command_ids.h
index 27bef03227b633b74e30dd3b294ef52b10d63985..b5e0ddb95f529b58d01503982c66128bd2ec175e 100644
--- a/chrome/app/chrome_command_ids.h
+++ b/chrome/app/chrome_command_ids.h
@@ -33,6 +33,7 @@
 #define IDC_RELOAD_IGNORING_CACHE       33007
 #define IDC_LOAD_NEW_TAB_PAGE           33008
 #define IDC_RELOAD_CLEARING_CACHE       33009
+#define IDC_SWITCH                      33010
 
 // Window management commands
 #define IDC_NEW_WINDOW                  34000
diff --git a/chrome/app/generated_resources.grd b/chrome/app/generated_resources.grd
index d410c1c40c3ded21d24144b217a700c8b6432249..c8b81cfd88ddf63693143e3c8aa176b503a7c3e8 100644
--- a/chrome/app/generated_resources.grd
+++ b/chrome/app/generated_resources.grd
@@ -7491,6 +7491,9 @@ Keep your key file in a safe place. You will need it to create new versions of y
       <message name="IDS_TOOLTIP_STOP" desc="The tooltip for the stop button">
         Stop loading this page
       </message>
+      <message name="IDS_TOOLTIP_SWITCH" desc="The tooltip for switch button">
+        Reload this page and switch profile
+      </message>
       <if expr="is_macosx">
         <message name="IDS_TOOLTIP_CLOSE_TAB" desc="The tooltip for the close tab button">
           Close
@@ -7556,6 +7559,9 @@ Keep your key file in a safe place. You will need it to create new versions of y
       <message name="IDS_ACCNAME_RELOAD" desc="The accessible name for the reload/stop button.">
         Reload
       </message>
+      <message name="IDS_ACCNAME_SWITCH" desc="The accessible name for the switch profile button.">
+        Switch
+      </message>
       <message name="IDS_ACCNAME_LOCATION" desc="The accessible name for the editable-text portion of the omnibox.">
         Address and search bar
       </message>
@@ -8147,6 +8153,45 @@ I don't think this site should be blocked!
       <message name="IDS_CONTENT_SETTING_CHANGED_INFOBAR_BUTTON" desc="The string used in the infobar button allowing the user to reload the page directly from the infobar.">
         Reload
       </message>
+      <message name="IDS_TRACKING_TAB_LABEL" desc="Label for Tracking tab on Content Settings dialog">
+        Tracking
+      </message>
+      <message name="IDS_TRACKING_HEADER" desc="Header for tracking policy management page on Content Settings dialog">
+        Tracking - URL policies
+      </message>
+      <message name="IDS_TRACKING_CATEGORY_HEADER" desc="Header for tracking policy management page on Content Settings dialog">
+        Tracking - Category policies
+      </message>
+      <message name="IDS_TRACKING_ALLOW_RADIO" desc="A radio button in the Content Settings dialog for using the normal (persistent) profile as the fallback browsing profile.">
+        Use the normal (persistent) profile as the fallback (default) profile
+      </message>
+      <message name="IDS_TRACKING_BLOCK_RADIO" desc="A radio button in the Content Settings dialog for using an anonymous (temporary) profile as the fallback browsing profile.">
+        Use an anonymous (temporary) profile as the fallback (default) profile
+      </message>
+      <message name="IDS_TRACKING_URL_EXCEPTIONS_MANAGE" desc="The label on the button that launches the URL exceptions management page for tracking preference">
+        Manage URL exceptions...
+      </message>
+      <message name="IDS_TRACKING_CATEGORY_EXCEPTIONS_MANAGE" desc="The label on the button that launches the category exceptions management page for tracking preference">
+        Manage category exceptions...
+      </message>
+      <message name="IDS_EXCEPTIONS_ALLOW_HIGH_BUTTON" desc="A label to display in the exception page's action column when a site's content setting is allowed for a given domain with high priority">
+        Allow - High priority
+      </message>
+      <message name="IDS_EXCEPTIONS_ALLOW_MEDIUM_BUTTON" desc="A label to display in the exception page's action column when a site's content setting is allowed for a given domain with medium priority">
+        Allow
+      </message>
+      <message name="IDS_EXCEPTIONS_ALLOW_LOW_BUTTON" desc="A label to display in the exception page's action column when a site's content setting is allowed for a given domain with low priority">
+        Allow - Low priority
+      </message>
+      <message name="IDS_EXCEPTIONS_BLOCK_HIGH_BUTTON" desc="A label to display in the exception page's action column when a site's content setting is blocked for a given domain with high priority.">
+        Block - High priority
+      </message>
+      <message name="IDS_EXCEPTIONS_BLOCK_MEDIUM_BUTTON" desc="A label to display in the exception page's action column when a site's content setting is blocked for a given domain with medium priority.">
+        Block
+      </message>
+      <message name="IDS_EXCEPTIONS_BLOCK_LOW_BUTTON" desc="A label to display in the exception page's action column when a site's content setting is blocked for a given domain with low priority.">
+        Block - Low priority
+      </message>
 
       <!-- Mac and Chrome OS users do not close their browser. Mac users quit it and Chrome OS users log out. -->
       <if expr="not is_macosx and not chromeos">
diff --git a/chrome/app/nibs/Toolbar.xib b/chrome/app/nibs/Toolbar.xib
index cde4f53ce251393fec4864478d4a175288dd1c17..28bd04e63f0d9d8f668aae90b12095f985cbc15a 100644
--- a/chrome/app/nibs/Toolbar.xib
+++ b/chrome/app/nibs/Toolbar.xib
@@ -1,17 +1,16 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<archive type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="7.10">
+<archive type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="8.00">
 	<data>
 		<int key="IBDocument.SystemTarget">1050</int>
-		<string key="IBDocument.SystemVersion">12D78</string>
-		<string key="IBDocument.InterfaceBuilderVersion">3084</string>
-		<string key="IBDocument.AppKitVersion">1187.37</string>
-		<string key="IBDocument.HIToolboxVersion">626.00</string>
+		<string key="IBDocument.SystemVersion">15D21</string>
+		<string key="IBDocument.InterfaceBuilderVersion">7706</string>
+		<string key="IBDocument.AppKitVersion">1404.34</string>
+		<string key="IBDocument.HIToolboxVersion">807.20</string>
 		<object class="NSMutableDictionary" key="IBDocument.PluginVersions">
 			<string key="NS.key.0">com.apple.InterfaceBuilder.CocoaPlugin</string>
-			<string key="NS.object.0">3084</string>
+			<string key="NS.object.0">7706</string>
 		</object>
-		<object class="NSArray" key="IBDocument.IntegratedClassDependencies">
-			<bool key="EncodedWithXMLCoder">YES</bool>
+		<array key="IBDocument.IntegratedClassDependencies">
 			<string>NSButton</string>
 			<string>NSButtonCell</string>
 			<string>NSCustomObject</string>
@@ -19,17 +18,15 @@
 			<string>NSTextField</string>
 			<string>NSTextFieldCell</string>
 			<string>NSUserDefaultsController</string>
-		</object>
-		<object class="NSArray" key="IBDocument.PluginDependencies">
-			<bool key="EncodedWithXMLCoder">YES</bool>
+		</array>
+		<array key="IBDocument.PluginDependencies">
 			<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-		</object>
+		</array>
 		<object class="NSMutableDictionary" key="IBDocument.Metadata">
 			<string key="NS.key.0">PluginDependencyRecalculationVersion</string>
 			<integer value="1" key="NS.object.0"/>
 		</object>
-		<object class="NSMutableArray" key="IBDocument.RootObjects" id="1000">
-			<bool key="EncodedWithXMLCoder">YES</bool>
+		<array class="NSMutableArray" key="IBDocument.RootObjects" id="1000">
 			<object class="NSCustomObject" id="1001">
 				<string key="NSClassName">ToolbarController</string>
 			</object>
@@ -42,8 +39,7 @@
 			<object class="NSCustomView" id="928520650">
 				<reference key="NSNextResponder"/>
 				<int key="NSvFlags">266</int>
-				<object class="NSMutableArray" key="NSSubviews">
-					<bool key="EncodedWithXMLCoder">YES</bool>
+				<array class="NSMutableArray" key="NSSubviews">
 					<object class="NSCustomView" id="421615633">
 						<reference key="NSNextResponder" ref="928520650"/>
 						<int key="NSvFlags">-2147483383</int>
@@ -56,7 +52,7 @@
 					<object class="NSTextField" id="535508469">
 						<reference key="NSNextResponder" ref="928520650"/>
 						<int key="NSvFlags">266</int>
-						<string key="NSFrame">{{119, 4}, {454, 29}}</string>
+						<string key="NSFrame">{{148, 4}, {425, 29}}</string>
 						<reference key="NSSuperview" ref="928520650"/>
 						<reference key="NSWindow"/>
 						<reference key="NSNextKeyView" ref="421615633"/>
@@ -66,10 +62,10 @@
 							<int key="NSCellFlags">-1804599231</int>
 							<int key="NSCellFlags2">66560</int>
 							<string key="NSContents"/>
-							<object class="NSFont" key="NSSupport">
-								<string key="NSName">LucidaGrande</string>
+							<object class="NSFont" key="NSSupport" id="64724822">
+								<bool key="IBIsSystemFont">YES</bool>
 								<double key="NSSize">13</double>
-								<int key="NSfFlags">16</int>
+								<int key="NSfFlags">1044</int>
 							</object>
 							<reference key="NSControlView" ref="535508469"/>
 							<bool key="NSDrawsBackground">YES</bool>
@@ -93,13 +89,37 @@
 							</object>
 						</object>
 						<bool key="NSAllowsLogicalLayoutDirection">NO</bool>
+						<int key="NSTextFieldAlignmentRectInsetsVersion">2</int>
 					</object>
-					<object class="NSButton" id="368496192">
+					<object class="NSButton" id="554084083">
 						<reference key="NSNextResponder" ref="928520650"/>
 						<int key="NSvFlags">268</int>
 						<string key="NSFrame">{{87, 4}, {29, 29}}</string>
 						<reference key="NSSuperview" ref="928520650"/>
 						<reference key="NSWindow"/>
+						<int key="NSTag">33010</int>
+						<bool key="NSEnabled">YES</bool>
+						<object class="NSButtonCell" key="NSCell" id="629374504">
+							<int key="NSCellFlags">67108864</int>
+							<int key="NSCellFlags2">134250496</int>
+							<string key="NSContents"/>
+							<reference key="NSSupport" ref="64724822"/>
+							<reference key="NSControlView" ref="554084083"/>
+							<int key="NSButtonFlags">-2039201792</int>
+							<int key="NSButtonFlags2">6</int>
+							<string key="NSAlternateContents"/>
+							<string key="NSKeyEquivalent"/>
+							<int key="NSPeriodicDelay">400</int>
+							<int key="NSPeriodicInterval">75</int>
+						</object>
+						<bool key="NSAllowsLogicalLayoutDirection">NO</bool>
+					</object>
+					<object class="NSButton" id="368496192">
+						<reference key="NSNextResponder" ref="928520650"/>
+						<int key="NSvFlags">268</int>
+						<string key="NSFrame">{{115, 4}, {29, 29}}</string>
+						<reference key="NSSuperview" ref="928520650"/>
+						<reference key="NSWindow"/>
 						<reference key="NSNextKeyView" ref="535508469"/>
 						<int key="NSTag">33003</int>
 						<bool key="NSEnabled">YES</bool>
@@ -107,11 +127,7 @@
 							<int key="NSCellFlags">67108864</int>
 							<int key="NSCellFlags2">134250496</int>
 							<string key="NSContents"/>
-							<object class="NSFont" key="NSSupport" id="64724822">
-								<string key="NSName">LucidaGrande</string>
-								<double key="NSSize">13</double>
-								<int key="NSfFlags">1044</int>
-							</object>
+							<reference key="NSSupport" ref="64724822"/>
 							<reference key="NSControlView" ref="368496192"/>
 							<int key="NSButtonFlags">-2039201792</int>
 							<int key="NSButtonFlags2">6</int>
@@ -200,7 +216,6 @@
 						<string key="NSFrame">{{572, 4}, {29, 29}}</string>
 						<reference key="NSSuperview" ref="928520650"/>
 						<reference key="NSWindow"/>
-						<reference key="NSNextKeyView"/>
 						<bool key="NSEnabled">YES</bool>
 						<object class="NSButtonCell" key="NSCell" id="204555298">
 							<int key="NSCellFlags">67108864</int>
@@ -217,7 +232,7 @@
 						</object>
 						<bool key="NSAllowsLogicalLayoutDirection">NO</bool>
 					</object>
-				</object>
+				</array>
 				<string key="NSFrameSize">{604, 35}</string>
 				<reference key="NSSuperview"/>
 				<reference key="NSWindow"/>
@@ -230,10 +245,9 @@
 			<object class="NSUserDefaultsController" id="306232897">
 				<bool key="NSSharedInstance">YES</bool>
 			</object>
-		</object>
+		</array>
 		<object class="IBObjectContainer" key="IBDocument.Objects">
-			<object class="NSMutableArray" key="connectionRecords">
-				<bool key="EncodedWithXMLCoder">YES</bool>
+			<array key="connectionRecords">
 				<object class="IBConnectionRecord">
 					<object class="IBOutletConnection" key="connection">
 						<string key="label">backButton_</string>
@@ -299,6 +313,14 @@
 					<int key="connectionID">154</int>
 				</object>
 				<object class="IBConnectionRecord">
+					<object class="IBOutletConnection" key="connection">
+						<string key="label">switchButton_</string>
+						<reference key="source" ref="1001"/>
+						<reference key="destination" ref="554084083"/>
+					</object>
+					<int key="connectionID">229</int>
+				</object>
+				<object class="IBConnectionRecord">
 					<object class="IBActionConnection" key="connection">
 						<string key="label">commandDispatch:</string>
 						<reference key="source" ref="1003"/>
@@ -339,6 +361,14 @@
 					<int key="connectionID">155</int>
 				</object>
 				<object class="IBConnectionRecord">
+					<object class="IBActionConnection" key="connection">
+						<string key="label">commandDispatchUsingKeyModifiers:</string>
+						<reference key="source" ref="1003"/>
+						<reference key="destination" ref="554084083"/>
+					</object>
+					<int key="connectionID">228</int>
+				</object>
+				<object class="IBConnectionRecord">
 					<object class="IBOutletConnection" key="connection">
 						<string key="label">owner_</string>
 						<reference key="source" ref="1044322163"/>
@@ -346,15 +376,12 @@
 					</object>
 					<int key="connectionID">123</int>
 				</object>
-			</object>
+			</array>
 			<object class="IBMutableOrderedSet" key="objectRecords">
-				<object class="NSArray" key="orderedObjects">
-					<bool key="EncodedWithXMLCoder">YES</bool>
+				<array key="orderedObjects">
 					<object class="IBObjectRecord">
 						<int key="objectID">0</int>
-						<object class="NSArray" key="object" id="0">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-						</object>
+						<array key="object" id="0"/>
 						<reference key="children" ref="1000"/>
 						<nil key="parent"/>
 					</object>
@@ -379,61 +406,56 @@
 					<object class="IBObjectRecord">
 						<int key="objectID">1</int>
 						<reference key="object" ref="928520650"/>
-						<object class="NSMutableArray" key="children">
-							<bool key="EncodedWithXMLCoder">YES</bool>
+						<array class="NSMutableArray" key="children">
 							<reference ref="634265909"/>
 							<reference ref="535508469"/>
 							<reference ref="781044416"/>
-							<reference ref="368496192"/>
 							<reference ref="421615633"/>
 							<reference ref="602421009"/>
 							<reference ref="458854861"/>
-						</object>
+							<reference ref="554084083"/>
+							<reference ref="368496192"/>
+						</array>
 						<reference key="parent" ref="0"/>
 					</object>
 					<object class="IBObjectRecord">
 						<int key="objectID">2</int>
 						<reference key="object" ref="634265909"/>
-						<object class="NSMutableArray" key="children">
-							<bool key="EncodedWithXMLCoder">YES</bool>
+						<array class="NSMutableArray" key="children">
 							<reference ref="697431051"/>
-						</object>
+						</array>
 						<reference key="parent" ref="928520650"/>
 					</object>
 					<object class="IBObjectRecord">
 						<int key="objectID">3</int>
 						<reference key="object" ref="458854861"/>
-						<object class="NSMutableArray" key="children">
-							<bool key="EncodedWithXMLCoder">YES</bool>
+						<array class="NSMutableArray" key="children">
 							<reference ref="386107000"/>
-						</object>
+						</array>
 						<reference key="parent" ref="928520650"/>
 					</object>
 					<object class="IBObjectRecord">
 						<int key="objectID">4</int>
 						<reference key="object" ref="535508469"/>
-						<object class="NSMutableArray" key="children">
-							<bool key="EncodedWithXMLCoder">YES</bool>
+						<array class="NSMutableArray" key="children">
 							<reference ref="464583340"/>
-						</object>
+						</array>
 						<reference key="parent" ref="928520650"/>
 					</object>
 					<object class="IBObjectRecord">
 						<int key="objectID">7</int>
 						<reference key="object" ref="781044416"/>
-						<object class="NSMutableArray" key="children">
-							<bool key="EncodedWithXMLCoder">YES</bool>
+						<array class="NSMutableArray" key="children">
 							<reference ref="3781855"/>
-						</object>
+						</array>
 						<reference key="parent" ref="928520650"/>
 					</object>
 					<object class="IBObjectRecord">
 						<int key="objectID">8</int>
 						<reference key="object" ref="368496192"/>
-						<object class="NSMutableArray" key="children">
-							<bool key="EncodedWithXMLCoder">YES</bool>
+						<array class="NSMutableArray" key="children">
 							<reference ref="760046712"/>
-						</object>
+						</array>
 						<reference key="parent" ref="928520650"/>
 					</object>
 					<object class="IBObjectRecord">
@@ -464,10 +486,9 @@
 					<object class="IBObjectRecord">
 						<int key="objectID">38</int>
 						<reference key="object" ref="602421009"/>
-						<object class="NSMutableArray" key="children">
-							<bool key="EncodedWithXMLCoder">YES</bool>
+						<array class="NSMutableArray" key="children">
 							<reference ref="204555298"/>
-						</object>
+						</array>
 						<reference key="parent" ref="928520650"/>
 					</object>
 					<object class="IBObjectRecord">
@@ -491,147 +512,121 @@
 						<reference key="parent" ref="928520650"/>
 						<string key="objectName">Browser Actions Container</string>
 					</object>
-				</object>
-			</object>
-			<object class="NSMutableDictionary" key="flattenedProperties">
-				<bool key="EncodedWithXMLCoder">YES</bool>
-				<object class="NSArray" key="dict.sortedKeys">
-					<bool key="EncodedWithXMLCoder">YES</bool>
-					<string>-1.IBPluginDependency</string>
-					<string>-2.IBPluginDependency</string>
-					<string>-3.IBPluginDependency</string>
-					<string>1.IBPluginDependency</string>
-					<string>10.CustomClassName</string>
-					<string>10.IBPluginDependency</string>
-					<string>122.IBPluginDependency</string>
-					<string>13.CustomClassName</string>
-					<string>13.IBPluginDependency</string>
-					<string>130.IBPluginDependency</string>
-					<string>14.CustomClassName</string>
-					<string>14.IBPluginDependency</string>
-					<string>144.IBPluginDependency</string>
-					<string>15.CustomClassName</string>
-					<string>15.IBPluginDependency</string>
-					<string>2.CustomClassName</string>
-					<string>2.IBAttributePlaceholdersKey</string>
-					<string>2.IBPluginDependency</string>
-					<string>3.CustomClassName</string>
-					<string>3.IBAttributePlaceholdersKey</string>
-					<string>3.IBPluginDependency</string>
-					<string>38.CustomClassName</string>
-					<string>38.IBAttributePlaceholdersKey</string>
-					<string>38.IBPluginDependency</string>
-					<string>39.CustomClassName</string>
-					<string>39.IBPluginDependency</string>
-					<string>4.CustomClassName</string>
-					<string>4.IBPluginDependency</string>
-					<string>7.CustomClassName</string>
-					<string>7.IBAttributePlaceholdersKey</string>
-					<string>7.IBPluginDependency</string>
-					<string>8.CustomClassName</string>
-					<string>8.IBAttributePlaceholdersKey</string>
-					<string>8.IBPluginDependency</string>
-					<string>9.CustomClassName</string>
-					<string>9.IBPluginDependency</string>
-				</object>
-				<object class="NSArray" key="dict.values">
-					<bool key="EncodedWithXMLCoder">YES</bool>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>ClickHoldButtonCell</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>AutocompleteTextFieldCell</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>ClickHoldButtonCell</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>ClickHoldButtonCell</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>MenuButton</string>
-					<object class="NSMutableDictionary">
-						<string key="NS.key.0">ToolTip</string>
-						<object class="IBToolTipAttribute" key="NS.object.0">
-							<string key="name">ToolTip</string>
-							<reference key="object" ref="634265909"/>
-							<string key="toolTip">^IDS_TOOLTIP_BACK</string>
-						</object>
+					<object class="IBObjectRecord">
+						<int key="objectID">225</int>
+						<reference key="object" ref="554084083"/>
+						<array class="NSMutableArray" key="children">
+							<reference ref="629374504"/>
+						</array>
+						<reference key="parent" ref="928520650"/>
 					</object>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>ReloadButton</string>
-					<object class="NSMutableDictionary">
-						<string key="NS.key.0">ToolTip</string>
-						<object class="IBToolTipAttribute" key="NS.object.0">
-							<string key="name">ToolTip</string>
-							<reference key="object" ref="458854861"/>
-							<string key="toolTip">^IDS_TOOLTIP_RELOAD</string>
-						</object>
+					<object class="IBObjectRecord">
+						<int key="objectID">226</int>
+						<reference key="object" ref="629374504"/>
+						<reference key="parent" ref="554084083"/>
 					</object>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>MenuButton</string>
-					<object class="NSMutableDictionary">
-						<string key="NS.key.0">ToolTip</string>
-						<object class="IBToolTipAttribute" key="NS.object.0">
-							<string key="name">ToolTip</string>
-							<reference key="object" ref="602421009"/>
-							<string key="toolTip">^IDS_APPMENU_TOOLTIP</string>
-						</object>
+				</array>
+			</object>
+			<dictionary class="NSMutableDictionary" key="flattenedProperties">
+				<string key="-1.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="-2.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="-3.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<reference key="1.IBNSViewMetadataGestureRecognizers" ref="0"/>
+				<string key="1.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="10.CustomClassName">ClickHoldButtonCell</string>
+				<string key="10.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="122.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="13.CustomClassName">AutocompleteTextFieldCell</string>
+				<string key="13.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="130.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="14.CustomClassName">ClickHoldButtonCell</string>
+				<string key="14.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="144.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="15.CustomClassName">ClickHoldButtonCell</string>
+				<string key="15.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="2.CustomClassName">MenuButton</string>
+				<object class="NSMutableDictionary" key="2.IBAttributePlaceholdersKey">
+					<string key="NS.key.0">ToolTip</string>
+					<object class="IBToolTipAttribute" key="NS.object.0">
+						<string key="name">ToolTip</string>
+						<reference key="object" ref="634265909"/>
+						<string key="toolTip">^IDS_TOOLTIP_BACK</string>
+					</object>
+				</object>
+				<string key="2.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="225.CustomClassName">ToolbarButton</string>
+				<object class="NSMutableDictionary" key="225.IBAttributePlaceholdersKey">
+					<string key="NS.key.0">ToolTip</string>
+					<object class="IBToolTipAttribute" key="NS.object.0">
+						<string key="name">ToolTip</string>
+						<reference key="object" ref="554084083"/>
+						<string key="toolTip">^IDS_TOOLTIP_SWITCH</string>
+					</object>
+				</object>
+				<string key="225.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="226.CustomClassName">ClickHoldButtonCell</string>
+				<string key="226.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="3.CustomClassName">ReloadButton</string>
+				<object class="NSMutableDictionary" key="3.IBAttributePlaceholdersKey">
+					<string key="NS.key.0">ToolTip</string>
+					<object class="IBToolTipAttribute" key="NS.object.0">
+						<string key="name">ToolTip</string>
+						<reference key="object" ref="458854861"/>
+						<string key="toolTip">^IDS_TOOLTIP_RELOAD</string>
 					</object>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>WrenchToolbarButtonCell</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>AutocompleteTextField</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>MenuButton</string>
-					<object class="NSMutableDictionary">
-						<string key="NS.key.0">ToolTip</string>
-						<object class="IBToolTipAttribute" key="NS.object.0">
-							<string key="name">ToolTip</string>
-							<reference key="object" ref="781044416"/>
-							<string key="toolTip">^IDS_TOOLTIP_FORWARD</string>
-						</object>
+				</object>
+				<string key="3.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="38.CustomClassName">MenuButton</string>
+				<object class="NSMutableDictionary" key="38.IBAttributePlaceholdersKey">
+					<string key="NS.key.0">ToolTip</string>
+					<object class="IBToolTipAttribute" key="NS.object.0">
+						<string key="name">ToolTip</string>
+						<reference key="object" ref="602421009"/>
+						<string key="toolTip">^IDS_APPMENU_TOOLTIP</string>
+					</object>
+				</object>
+				<string key="38.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="39.CustomClassName">WrenchToolbarButtonCell</string>
+				<string key="39.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="4.CustomClassName">AutocompleteTextField</string>
+				<string key="4.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="7.CustomClassName">MenuButton</string>
+				<object class="NSMutableDictionary" key="7.IBAttributePlaceholdersKey">
+					<string key="NS.key.0">ToolTip</string>
+					<object class="IBToolTipAttribute" key="NS.object.0">
+						<string key="name">ToolTip</string>
+						<reference key="object" ref="781044416"/>
+						<string key="toolTip">^IDS_TOOLTIP_FORWARD</string>
 					</object>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>ToolbarButton</string>
-					<object class="NSMutableDictionary">
-						<string key="NS.key.0">ToolTip</string>
-						<object class="IBToolTipAttribute" key="NS.object.0">
-							<string key="name">ToolTip</string>
-							<reference key="object" ref="368496192"/>
-							<string key="toolTip">^IDS_TOOLTIP_HOME</string>
-						</object>
+				</object>
+				<string key="7.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="8.CustomClassName">ToolbarButton</string>
+				<object class="NSMutableDictionary" key="8.IBAttributePlaceholdersKey">
+					<string key="NS.key.0">ToolTip</string>
+					<object class="IBToolTipAttribute" key="NS.object.0">
+						<string key="name">ToolTip</string>
+						<reference key="object" ref="368496192"/>
+						<string key="toolTip">^IDS_TOOLTIP_HOME</string>
 					</object>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
-					<string>ClickHoldButtonCell</string>
-					<string>com.apple.InterfaceBuilder.CocoaPlugin</string>
 				</object>
-			</object>
-			<object class="NSMutableDictionary" key="unlocalizedProperties">
-				<bool key="EncodedWithXMLCoder">YES</bool>
-				<reference key="dict.sortedKeys" ref="0"/>
-				<reference key="dict.values" ref="0"/>
-			</object>
+				<string key="8.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+				<string key="9.CustomClassName">ClickHoldButtonCell</string>
+				<string key="9.IBPluginDependency">com.apple.InterfaceBuilder.CocoaPlugin</string>
+			</dictionary>
+			<dictionary class="NSMutableDictionary" key="unlocalizedProperties"/>
 			<nil key="activeLocalization"/>
-			<object class="NSMutableDictionary" key="localizations">
-				<bool key="EncodedWithXMLCoder">YES</bool>
-				<reference key="dict.sortedKeys" ref="0"/>
-				<reference key="dict.values" ref="0"/>
-			</object>
+			<dictionary class="NSMutableDictionary" key="localizations"/>
 			<nil key="sourceID"/>
-			<int key="maxID">224</int>
+			<int key="maxID">229</int>
 		</object>
 		<object class="IBClassDescriber" key="IBDocument.Classes">
-			<object class="NSMutableArray" key="referencedPartialClassDescriptions">
-				<bool key="EncodedWithXMLCoder">YES</bool>
+			<array class="NSMutableArray" key="referencedPartialClassDescriptions">
 				<object class="IBPartialClassDescription">
 					<string key="className">AutocompleteTextField</string>
 					<string key="superclassName">StyledTextField</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/AutocompleteTextField.h</string>
+						<string key="minorKey">../browser/ui/cocoa/location_bar/autocomplete_text_field.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
@@ -639,15 +634,7 @@
 					<string key="superclassName">StyledTextFieldCell</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/AutocompleteTextFieldCell.h</string>
-					</object>
-				</object>
-				<object class="IBPartialClassDescription">
-					<string key="className">BackgroundGradientView</string>
-					<string key="superclassName">NSView</string>
-					<object class="IBClassDescriptionSource" key="sourceIdentifier">
-						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/BackgroundGradientView.h</string>
+						<string key="minorKey">../browser/ui/cocoa/location_bar/autocomplete_text_field_cell.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
@@ -655,7 +642,7 @@
 					<string key="superclassName">NSView</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/BrowserActionsContainerView.h</string>
+						<string key="minorKey">../browser/ui/cocoa/extensions/browser_actions_container_view.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
@@ -663,7 +650,7 @@
 					<string key="superclassName">GTMUILocalizer</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/ChromeUILocalizer.h</string>
+						<string key="minorKey">../browser/ui/cocoa/ui_localizer.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
@@ -671,43 +658,25 @@
 					<string key="superclassName">ImageButtonCell</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/ClickHoldButtonCell.h</string>
+						<string key="minorKey">../browser/ui/cocoa/clickhold_button_cell.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
 					<string key="className">FirstResponder</string>
-					<object class="NSMutableDictionary" key="actions">
-						<bool key="EncodedWithXMLCoder">YES</bool>
-						<object class="NSArray" key="dict.sortedKeys">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<string>commandDispatch:</string>
-							<string>commandDispatchUsingKeyModifiers:</string>
-						</object>
-						<object class="NSArray" key="dict.values">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<string>id</string>
-							<string>id</string>
-						</object>
-					</object>
-					<object class="NSMutableDictionary" key="actionInfosByName">
-						<bool key="EncodedWithXMLCoder">YES</bool>
-						<object class="NSArray" key="dict.sortedKeys">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<string>commandDispatch:</string>
-							<string>commandDispatchUsingKeyModifiers:</string>
-						</object>
-						<object class="NSArray" key="dict.values">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<object class="IBActionInfo">
-								<string key="name">commandDispatch:</string>
-								<string key="candidateClassName">id</string>
-							</object>
-							<object class="IBActionInfo">
-								<string key="name">commandDispatchUsingKeyModifiers:</string>
-								<string key="candidateClassName">id</string>
-							</object>
-						</object>
-					</object>
+					<dictionary class="NSMutableDictionary" key="actions">
+						<string key="commandDispatch:">id</string>
+						<string key="commandDispatchUsingKeyModifiers:">id</string>
+					</dictionary>
+					<dictionary class="NSMutableDictionary" key="actionInfosByName">
+						<object class="IBActionInfo" key="commandDispatch:">
+							<string key="name">commandDispatch:</string>
+							<string key="candidateClassName">id</string>
+						</object>
+						<object class="IBActionInfo" key="commandDispatchUsingKeyModifiers:">
+							<string key="name">commandDispatchUsingKeyModifiers:</string>
+							<string key="candidateClassName">id</string>
+						</object>
+					</dictionary>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBUserSource</string>
 						<string key="minorKey"/>
@@ -716,48 +685,55 @@
 				<object class="IBPartialClassDescription">
 					<string key="className">GTMUILocalizer</string>
 					<string key="superclassName">NSObject</string>
-					<object class="NSMutableDictionary" key="outlets">
-						<bool key="EncodedWithXMLCoder">YES</bool>
-						<object class="NSArray" key="dict.sortedKeys">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<string>otherObjectToLocalize_</string>
-							<string>owner_</string>
-							<string>yetAnotherObjectToLocalize_</string>
-						</object>
-						<object class="NSArray" key="dict.values">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<string>id</string>
-							<string>id</string>
-							<string>id</string>
-						</object>
-					</object>
-					<object class="NSMutableDictionary" key="toOneOutletInfosByName">
-						<bool key="EncodedWithXMLCoder">YES</bool>
-						<object class="NSArray" key="dict.sortedKeys">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<string>otherObjectToLocalize_</string>
-							<string>owner_</string>
-							<string>yetAnotherObjectToLocalize_</string>
-						</object>
-						<object class="NSArray" key="dict.values">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<object class="IBToOneOutletInfo">
-								<string key="name">otherObjectToLocalize_</string>
-								<string key="candidateClassName">id</string>
-							</object>
-							<object class="IBToOneOutletInfo">
-								<string key="name">owner_</string>
-								<string key="candidateClassName">id</string>
-							</object>
-							<object class="IBToOneOutletInfo">
-								<string key="name">yetAnotherObjectToLocalize_</string>
-								<string key="candidateClassName">id</string>
-							</object>
-						</object>
+					<dictionary class="NSMutableDictionary" key="outlets">
+						<string key="otherObjectToLocalize_">id</string>
+						<string key="owner_">id</string>
+						<string key="yetAnotherObjectToLocalize_">id</string>
+					</dictionary>
+					<dictionary class="NSMutableDictionary" key="toOneOutletInfosByName">
+						<object class="IBToOneOutletInfo" key="otherObjectToLocalize_">
+							<string key="name">otherObjectToLocalize_</string>
+							<string key="candidateClassName">id</string>
+						</object>
+						<object class="IBToOneOutletInfo" key="owner_">
+							<string key="name">owner_</string>
+							<string key="candidateClassName">id</string>
+						</object>
+						<object class="IBToOneOutletInfo" key="yetAnotherObjectToLocalize_">
+							<string key="name">yetAnotherObjectToLocalize_</string>
+							<string key="candidateClassName">id</string>
+						</object>
+					</dictionary>
+					<object class="IBClassDescriptionSource" key="sourceIdentifier">
+						<string key="majorKey">IBProjectSource</string>
+						<string key="minorKey">../../third_party/google_toolbox_for_mac/src/AppKit/GTMUILocalizer.h</string>
 					</object>
+				</object>
+				<object class="IBPartialClassDescription">
+					<string key="className">GTMUILocalizer</string>
+					<string key="superclassName">NSObject</string>
+					<dictionary class="NSMutableDictionary" key="outlets">
+						<string key="otherObjectToLocalize">id</string>
+						<string key="owner">id</string>
+						<string key="yetAnotherObjectToLocalize">id</string>
+					</dictionary>
+					<dictionary class="NSMutableDictionary" key="toOneOutletInfosByName">
+						<object class="IBToOneOutletInfo" key="otherObjectToLocalize">
+							<string key="name">otherObjectToLocalize</string>
+							<string key="candidateClassName">id</string>
+						</object>
+						<object class="IBToOneOutletInfo" key="owner">
+							<string key="name">owner</string>
+							<string key="candidateClassName">id</string>
+						</object>
+						<object class="IBToOneOutletInfo" key="yetAnotherObjectToLocalize">
+							<string key="name">yetAnotherObjectToLocalize</string>
+							<string key="candidateClassName">id</string>
+						</object>
+					</dictionary>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/GTMUILocalizer.h</string>
+						<string key="minorKey">../../third_party/google_toolbox_for_mac/src/iPhone/GTMUILocalizer.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
@@ -765,7 +741,7 @@
 					<string key="superclassName">NSButtonCell</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/ImageButtonCell.h</string>
+						<string key="minorKey">../browser/ui/cocoa/image_button_cell.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
@@ -784,143 +760,214 @@
 					</object>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/MenuButton.h</string>
+						<string key="minorKey">../browser/ui/cocoa/menu_button.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
-					<string key="className">ReloadButton</string>
-					<string key="superclassName">MenuButton</string>
+					<string key="className">StyledTextField</string>
+					<string key="superclassName">NSTextField</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/ReloadButton.h</string>
+						<string key="minorKey">../browser/ui/cocoa/styled_text_field.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
-					<string key="className">StyledTextField</string>
-					<string key="superclassName">NSTextField</string>
+					<string key="className">StyledTextFieldCell</string>
+					<string key="superclassName">NSTextFieldCell</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/StyledTextField.h</string>
+						<string key="minorKey">../browser/ui/cocoa/styled_text_field_cell.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
-					<string key="className">StyledTextFieldCell</string>
-					<string key="superclassName">NSTextFieldCell</string>
+					<string key="className">ToolbarController</string>
+					<string key="superclassName">NSViewController</string>
+					<dictionary class="NSMutableDictionary" key="outlets">
+						<string key="backButton_">MenuButton</string>
+						<string key="browserActionsContainerView_">BrowserActionsContainerView</string>
+						<string key="forwardButton_">MenuButton</string>
+						<string key="homeButton_">ToolbarButton</string>
+						<string key="locationBar_">AutocompleteTextField</string>
+						<string key="reloadButton_">ReloadButton</string>
+						<string key="switchButton_">ToolbarButton</string>
+						<string key="wrenchButton_">MenuButton</string>
+					</dictionary>
+					<dictionary class="NSMutableDictionary" key="toOneOutletInfosByName">
+						<object class="IBToOneOutletInfo" key="backButton_">
+							<string key="name">backButton_</string>
+							<string key="candidateClassName">MenuButton</string>
+						</object>
+						<object class="IBToOneOutletInfo" key="browserActionsContainerView_">
+							<string key="name">browserActionsContainerView_</string>
+							<string key="candidateClassName">BrowserActionsContainerView</string>
+						</object>
+						<object class="IBToOneOutletInfo" key="forwardButton_">
+							<string key="name">forwardButton_</string>
+							<string key="candidateClassName">MenuButton</string>
+						</object>
+						<object class="IBToOneOutletInfo" key="homeButton_">
+							<string key="name">homeButton_</string>
+							<string key="candidateClassName">ToolbarButton</string>
+						</object>
+						<object class="IBToOneOutletInfo" key="locationBar_">
+							<string key="name">locationBar_</string>
+							<string key="candidateClassName">AutocompleteTextField</string>
+						</object>
+						<object class="IBToOneOutletInfo" key="reloadButton_">
+							<string key="name">reloadButton_</string>
+							<string key="candidateClassName">ReloadButton</string>
+						</object>
+						<object class="IBToOneOutletInfo" key="switchButton_">
+							<string key="name">switchButton_</string>
+							<string key="candidateClassName">ToolbarButton</string>
+						</object>
+						<object class="IBToOneOutletInfo" key="wrenchButton_">
+							<string key="name">wrenchButton_</string>
+							<string key="candidateClassName">MenuButton</string>
+						</object>
+					</dictionary>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/StyledTextFieldCell.h</string>
+						<string key="minorKey">../browser/ui/cocoa/toolbar/toolbar_controller.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
-					<string key="className">ToolbarButton</string>
-					<string key="superclassName">NSButton</string>
+					<string key="className">WrenchToolbarButtonCell</string>
+					<string key="superclassName">ClickHoldButtonCell</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
 						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/ToolbarButton.h</string>
+						<string key="minorKey">../browser/ui/cocoa/toolbar/wrench_toolbar_button_cell.h</string>
 					</object>
 				</object>
+			</array>
+			<array class="NSMutableArray" key="referencedPartialClassDescriptionsV3.2+">
 				<object class="IBPartialClassDescription">
-					<string key="className">ToolbarController</string>
-					<string key="superclassName">NSViewController</string>
-					<object class="NSMutableDictionary" key="outlets">
-						<bool key="EncodedWithXMLCoder">YES</bool>
-						<object class="NSArray" key="dict.sortedKeys">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<string>backButton_</string>
-							<string>browserActionsContainerView_</string>
-							<string>forwardButton_</string>
-							<string>homeButton_</string>
-							<string>locationBar_</string>
-							<string>reloadButton_</string>
-							<string>wrenchButton_</string>
-						</object>
-						<object class="NSArray" key="dict.values">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<string>MenuButton</string>
-							<string>BrowserActionsContainerView</string>
-							<string>MenuButton</string>
-							<string>ToolbarButton</string>
-							<string>AutocompleteTextField</string>
-							<string>ReloadButton</string>
-							<string>MenuButton</string>
-						</object>
+					<string key="className">NSActionCell</string>
+					<string key="superclassName">NSCell</string>
+					<object class="IBClassDescriptionSource" key="sourceIdentifier">
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSActionCell.h</string>
 					</object>
-					<object class="NSMutableDictionary" key="toOneOutletInfosByName">
-						<bool key="EncodedWithXMLCoder">YES</bool>
-						<object class="NSArray" key="dict.sortedKeys">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<string>backButton_</string>
-							<string>browserActionsContainerView_</string>
-							<string>forwardButton_</string>
-							<string>homeButton_</string>
-							<string>locationBar_</string>
-							<string>reloadButton_</string>
-							<string>wrenchButton_</string>
-						</object>
-						<object class="NSArray" key="dict.values">
-							<bool key="EncodedWithXMLCoder">YES</bool>
-							<object class="IBToOneOutletInfo">
-								<string key="name">backButton_</string>
-								<string key="candidateClassName">MenuButton</string>
-							</object>
-							<object class="IBToOneOutletInfo">
-								<string key="name">browserActionsContainerView_</string>
-								<string key="candidateClassName">BrowserActionsContainerView</string>
-							</object>
-							<object class="IBToOneOutletInfo">
-								<string key="name">forwardButton_</string>
-								<string key="candidateClassName">MenuButton</string>
-							</object>
-							<object class="IBToOneOutletInfo">
-								<string key="name">homeButton_</string>
-								<string key="candidateClassName">ToolbarButton</string>
-							</object>
-							<object class="IBToOneOutletInfo">
-								<string key="name">locationBar_</string>
-								<string key="candidateClassName">AutocompleteTextField</string>
-							</object>
-							<object class="IBToOneOutletInfo">
-								<string key="name">reloadButton_</string>
-								<string key="candidateClassName">ReloadButton</string>
-							</object>
-							<object class="IBToOneOutletInfo">
-								<string key="name">wrenchButton_</string>
-								<string key="candidateClassName">MenuButton</string>
-							</object>
-						</object>
+				</object>
+				<object class="IBPartialClassDescription">
+					<string key="className">NSApplication</string>
+					<string key="superclassName">NSResponder</string>
+					<object class="IBClassDescriptionSource" key="sourceIdentifier">
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSApplication.h</string>
 					</object>
+				</object>
+				<object class="IBPartialClassDescription">
+					<string key="className">NSButtonCell</string>
+					<string key="superclassName">NSActionCell</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
-						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/ToolbarController.h</string>
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSButtonCell.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
-					<string key="className">ToolbarView</string>
-					<string key="superclassName">BackgroundGradientView</string>
+					<string key="className">NSCell</string>
+					<string key="superclassName">NSObject</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
-						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/ToolbarView.h</string>
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSCell.h</string>
 					</object>
 				</object>
 				<object class="IBPartialClassDescription">
-					<string key="className">WrenchToolbarButtonCell</string>
-					<string key="superclassName">ClickHoldButtonCell</string>
+					<string key="className">NSControl</string>
+					<string key="superclassName">NSView</string>
 					<object class="IBClassDescriptionSource" key="sourceIdentifier">
-						<string key="majorKey">IBProjectSource</string>
-						<string key="minorKey">./Classes/WrenchToolbarButtonCell.h</string>
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSControl.h</string>
 					</object>
 				</object>
-			</object>
+				<object class="IBPartialClassDescription">
+					<string key="className">NSController</string>
+					<string key="superclassName">NSObject</string>
+					<object class="IBClassDescriptionSource" key="sourceIdentifier">
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSController.h</string>
+					</object>
+				</object>
+				<object class="IBPartialClassDescription">
+					<string key="className">NSMenu</string>
+					<string key="superclassName">NSObject</string>
+					<object class="IBClassDescriptionSource" key="sourceIdentifier">
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSMenu.h</string>
+					</object>
+				</object>
+				<object class="IBPartialClassDescription">
+					<string key="className">NSResponder</string>
+					<string key="superclassName">NSObject</string>
+					<object class="IBClassDescriptionSource" key="sourceIdentifier">
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSResponder.h</string>
+					</object>
+				</object>
+				<object class="IBPartialClassDescription">
+					<string key="className">NSTextField</string>
+					<string key="superclassName">NSControl</string>
+					<object class="IBClassDescriptionSource" key="sourceIdentifier">
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSTextField.h</string>
+					</object>
+				</object>
+				<object class="IBPartialClassDescription">
+					<string key="className">NSTextFieldCell</string>
+					<string key="superclassName">NSActionCell</string>
+					<object class="IBClassDescriptionSource" key="sourceIdentifier">
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSTextFieldCell.h</string>
+					</object>
+				</object>
+				<object class="IBPartialClassDescription">
+					<string key="className">NSUserDefaultsController</string>
+					<string key="superclassName">NSController</string>
+					<object class="IBClassDescriptionSource" key="sourceIdentifier">
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSUserDefaultsController.h</string>
+					</object>
+				</object>
+				<object class="IBPartialClassDescription">
+					<string key="className">NSView</string>
+					<string key="superclassName">NSResponder</string>
+					<object class="IBClassDescriptionSource" key="sourceIdentifier">
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSView.h</string>
+					</object>
+				</object>
+				<object class="IBPartialClassDescription">
+					<string key="className">NSViewController</string>
+					<string key="superclassName">NSResponder</string>
+					<object class="NSMutableDictionary" key="outlets">
+						<string key="NS.key.0">view</string>
+						<string key="NS.object.0">NSView</string>
+					</object>
+					<object class="NSMutableDictionary" key="toOneOutletInfosByName">
+						<string key="NS.key.0">view</string>
+						<object class="IBToOneOutletInfo" key="NS.object.0">
+							<string key="name">view</string>
+							<string key="candidateClassName">NSView</string>
+						</object>
+					</object>
+					<object class="IBClassDescriptionSource" key="sourceIdentifier">
+						<string key="majorKey">IBFrameworkSource</string>
+						<string key="minorKey">AppKit.framework/Headers/NSViewController.h</string>
+					</object>
+				</object>
+			</array>
 		</object>
 		<int key="IBDocument.localizationMode">0</int>
 		<string key="IBDocument.TargetRuntimeIdentifier">IBCocoaFramework</string>
+		<bool key="IBDocument.previouslyAttemptedUpgradeToXcode5">NO</bool>
 		<object class="NSMutableDictionary" key="IBDocument.PluginDeclaredDependencies">
 			<string key="NS.key.0">com.apple.InterfaceBuilder.CocoaPlugin.macosx</string>
 			<integer value="1050" key="NS.object.0"/>
 		</object>
 		<object class="NSMutableDictionary" key="IBDocument.PluginDeclaredDevelopmentDependencies">
 			<string key="NS.key.0">com.apple.InterfaceBuilder.CocoaPlugin.InterfaceBuilder3</string>
-			<integer value="3000" key="NS.object.0"/>
+			<integer value="4600" key="NS.object.0"/>
 		</object>
 		<bool key="IBDocument.PluginDeclaredDependenciesTrackSystemTargetVersion">YES</bool>
 		<int key="IBDocument.defaultPropertyAccessControl">3</int>
diff --git a/chrome/app/theme/default_100_percent/common/browser_switch_hover.png b/chrome/app/theme/default_100_percent/common/browser_switch_hover.png
new file mode 100644
index 0000000000000000000000000000000000000000..5b19d260f83044dc069260dc1a46de48e05c929a
GIT binary patch
literal 2244
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
KF0<B)pZkA23as`3

literal 0
HcmV?d00001

diff --git a/chrome/app/theme/default_100_percent/common/browser_switch_normal.png b/chrome/app/theme/default_100_percent/common/browser_switch_normal.png
new file mode 100644
index 0000000000000000000000000000000000000000..d103651ab3c51c5b08ceb365b1d83e34440b7fe2
GIT binary patch
literal 1877
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

literal 0
HcmV?d00001

diff --git a/chrome/app/theme/default_100_percent/common/browser_switch_pressed.png b/chrome/app/theme/default_100_percent/common/browser_switch_pressed.png
new file mode 100644
index 0000000000000000000000000000000000000000..48b084f29e3abf50425c5332b9da4221027c1bde
GIT binary patch
literal 2164
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

literal 0
HcmV?d00001

diff --git a/chrome/app/theme/default_200_percent/common/browser_switch_hover.png b/chrome/app/theme/default_200_percent/common/browser_switch_hover.png
new file mode 100644
index 0000000000000000000000000000000000000000..96effc4a86e794c667b4c71823c39da7b975c357
GIT binary patch
literal 3531
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
DNmwIt

literal 0
HcmV?d00001

diff --git a/chrome/app/theme/default_200_percent/common/browser_switch_normal.png b/chrome/app/theme/default_200_percent/common/browser_switch_normal.png
new file mode 100644
index 0000000000000000000000000000000000000000..1049526990f9ea7d5bb46f4900fefa7ca1650f9b
GIT binary patch
literal 2640
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

literal 0
HcmV?d00001

diff --git a/chrome/app/theme/default_200_percent/common/browser_switch_pressed.png b/chrome/app/theme/default_200_percent/common/browser_switch_pressed.png
new file mode 100644
index 0000000000000000000000000000000000000000..d1baa7b7b8379beef06dc459aff01d7fe5dfeece
GIT binary patch
literal 3413
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

literal 0
HcmV?d00001

diff --git a/chrome/app/theme/theme_resources.grd b/chrome/app/theme/theme_resources.grd
index 3764cadc604ba132346fc3cf878654bd5e155aa5..e34e60da8319f1b7a7945f7cd59a83bba057aff8 100644
--- a/chrome/app/theme/theme_resources.grd
+++ b/chrome/app/theme/theme_resources.grd
@@ -330,6 +330,11 @@
         <structure type="chrome_scaled_image" name="IDR_HOME_H" file="common/browser_home_hover.png" />
         <structure type="chrome_scaled_image" name="IDR_HOME_P" file="common/browser_home_pressed.png" />
       </if>
+      <if expr="toolkit_views or is_macosx or is_ios">
+        <structure type="chrome_scaled_image" name="IDR_SWITCH" file="common/browser_switch_normal.png" />
+        <structure type="chrome_scaled_image" name="IDR_SWITCH_H" file="common/browser_switch_hover.png" />
+        <structure type="chrome_scaled_image" name="IDR_SWITCH_P" file="common/browser_switch_pressed.png" />
+      </if>
       <structure type="chrome_scaled_image" name="IDR_HOTWORD_NOTIFICATION_ICON" file="common/notification_hotword_icon.png" />
       <if expr="not is_android and not is_ios">
         <structure type="chrome_scaled_image" name="IDR_ICON_PROFILES_ACCOUNT_BUTTON_ERROR" file="common/avatar_menu_auth_error.png" />
diff --git a/chrome/browser/extensions/api/declarative_content/chrome_content_rules_registry.cc b/chrome/browser/extensions/api/declarative_content/chrome_content_rules_registry.cc
index 0907b913c9bdade731e9d1a3d1becf482c1bbfa2..997b66f522e859b67fa89eb365242a4a4f9a9ba8 100644
--- a/chrome/browser/extensions/api/declarative_content/chrome_content_rules_registry.cc
+++ b/chrome/browser/extensions/api/declarative_content/chrome_content_rules_registry.cc
@@ -34,6 +34,9 @@ void ChromeContentRulesRegistry::ForEachWebContents(const Func& func) {
 
     for (int i = 0, tab_count = browser->tab_strip_model()->count();
          i < tab_count; ++i) {
+      content::WebContents *contents = browser->tab_strip_model()->GetWebContentsAt(i);
+      if (!ContainsKey(active_rules_, contents))
+        TrackRulesForWebContents(contents);
       func(browser->tab_strip_model()->GetWebContentsAt(i));
     }
   }
diff --git a/chrome/browser/permissions/permission_manager.cc b/chrome/browser/permissions/permission_manager.cc
index e96e68e2a8feea652a82402c82eef21dff9c6d06..3467c64a76ffb4fa4d2d7ead2d976ea92abe68a9 100644
--- a/chrome/browser/permissions/permission_manager.cc
+++ b/chrome/browser/permissions/permission_manager.cc
@@ -33,6 +33,7 @@ PermissionStatus ContentSettingToPermissionStatus(ContentSetting setting) {
     case CONTENT_SETTING_DETECT_IMPORTANT_CONTENT:
     case CONTENT_SETTING_DEFAULT:
     case CONTENT_SETTING_NUM_SETTINGS:
+    default:
       break;
   }
 
diff --git a/chrome/browser/policy/configuration_policy_handler_list_factory.cc b/chrome/browser/policy/configuration_policy_handler_list_factory.cc
index f117e04626de64ee1b52a4a4286f09ea9f79eebd..365036fe0bfa1dd010cc0899c6e85506eee93ed5 100644
--- a/chrome/browser/policy/configuration_policy_handler_list_factory.cc
+++ b/chrome/browser/policy/configuration_policy_handler_list_factory.cc
@@ -159,6 +159,9 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kAutoSelectCertificateForUrls,
     prefs::kManagedAutoSelectCertificateForUrls,
     base::Value::TYPE_LIST },
+  { key::kDefaultTrackingPreferenceSetting,
+    prefs::kDefaultTrackingPreferenceSetting,
+    base::Value::TYPE_INTEGER },
   { key::kCookiesAllowedForUrls,
     prefs::kManagedCookiesAllowedForUrls,
     base::Value::TYPE_LIST },
diff --git a/chrome/browser/profiles/off_the_record_profile_impl.cc b/chrome/browser/profiles/off_the_record_profile_impl.cc
index 02ece36cda6b7f5a3a6101eba3a705dd8204d480..4f1054e4af12cea5be08a2dd266eee9353c16f7e 100644
--- a/chrome/browser/profiles/off_the_record_profile_impl.cc
+++ b/chrome/browser/profiles/off_the_record_profile_impl.cc
@@ -266,6 +266,10 @@ bool OffTheRecordProfileImpl::IsOffTheRecord() const {
   return true;
 }
 
+content::BrowserContext* OffTheRecordProfileImpl::GetOffTheRecordBrowserContext() {
+  return GetOffTheRecordProfile();
+}
+
 Profile* OffTheRecordProfileImpl::GetOffTheRecordProfile() {
   return this;
 }
diff --git a/chrome/browser/profiles/off_the_record_profile_impl.h b/chrome/browser/profiles/off_the_record_profile_impl.h
index ce70534e671d6c8c487c3c516b2160a913622d2b..cd30928bd537813ccdec508c0d9056ed226dc3b2 100644
--- a/chrome/browser/profiles/off_the_record_profile_impl.h
+++ b/chrome/browser/profiles/off_the_record_profile_impl.h
@@ -13,6 +13,7 @@
 #include "chrome/browser/ui/browser_list.h"
 #include "chrome/browser/ui/zoom/chrome_zoom_level_prefs.h"
 #include "components/domain_reliability/clear_mode.h"
+#include "content/public/browser/browser_context.h"
 #include "content/public/browser/content_browser_client.h"
 #include "content/public/browser/host_zoom_map.h"
 
@@ -89,6 +90,7 @@ class OffTheRecordProfileImpl : public Profile {
       const base::FilePath& partition_path) override;
   scoped_refptr<base::SequencedTaskRunner> GetIOTaskRunner() override;
   bool IsOffTheRecord() const override;
+  content::BrowserContext* GetOffTheRecordBrowserContext() override;
   content::DownloadManagerDelegate* GetDownloadManagerDelegate() override;
   net::URLRequestContextGetter* GetRequestContext() override;
   net::URLRequestContextGetter* GetRequestContextForRenderProcess(
diff --git a/chrome/browser/profiles/profile.cc b/chrome/browser/profiles/profile.cc
index 808e5343257557525b1126164205a09ad1033300..50e36937620584bc4d3dde6e7995dabed9c52957 100644
--- a/chrome/browser/profiles/profile.cc
+++ b/chrome/browser/profiles/profile.cc
@@ -34,8 +34,11 @@
 #include "extensions/browser/pref_names.h"
 #endif
 
+#include "components/content_settings/core/common/content_settings.h"
+
 Profile::Profile()
-    : restored_last_session_(false),
+    : tracking_default_mode(CONTENT_SETTING_BLOCK),
+      restored_last_session_(false),
       sent_destroyed_notification_(false),
       accessibility_pause_level_(0),
       is_guest_profile_(false),
diff --git a/chrome/browser/profiles/profile.h b/chrome/browser/profiles/profile.h
index dcdd6796655934fc433b4d3b19ad7f092ef5ff3c..9b39f08421c20abfa0bca081c6fc4e8f44ddfffd 100644
--- a/chrome/browser/profiles/profile.h
+++ b/chrome/browser/profiles/profile.h
@@ -371,6 +371,11 @@ class Profile : public content::BrowserContext {
   // storage partition.
   double GetDefaultZoomLevelForProfile();
 
+  // User Tracking Preference
+  bool tracking_is_offtherecord_profile;
+
+  int tracking_default_mode;
+
  protected:
   void set_is_guest_profile(bool is_guest_profile) {
     is_guest_profile_ = is_guest_profile;
diff --git a/chrome/browser/profiles/profile_impl.cc b/chrome/browser/profiles/profile_impl.cc
index 6eb96e9124b0403f2162ae6a12ebe790e1d9cee6..3c81d36491eac15b5e7b33cce523cb59fe1a3473 100644
--- a/chrome/browser/profiles/profile_impl.cc
+++ b/chrome/browser/profiles/profile_impl.cc
@@ -103,6 +103,9 @@
 #include "content/public/common/page_zoom.h"
 #include "ui/base/l10n/l10n_util.h"
 
+#include "chrome/browser/ui/tracking_control.h"
+#include "components/content_settings/core/browser/content_settings_utils.h"
+
 #if defined(OS_ANDROID)
 #include "chrome/browser/media/protected_media_identifier_permission_context.h"
 #include "chrome/browser/media/protected_media_identifier_permission_context_factory.h"
@@ -523,6 +526,13 @@ void ProfileImpl::DoFinalInit() {
       base::Bind(&ProfileImpl::UpdateProfileIsEphemeralCache,
                  base::Unretained(this)));
 
+  if (chrome::IsTrackingControlEnabled()) {
+    pref_change_registrar_.Add(
+        prefs::kDefaultTrackingPreferenceSetting,
+        base::Bind(&ProfileImpl::UpdateProfileDefaultTrackingPreference,
+                   base::Unretained(this)));
+  }
+
   // It would be nice to use PathService for fetching this directory, but
   // the cache directory depends on the profile directory, which isn't available
   // to PathService.
@@ -742,6 +752,10 @@ bool ProfileImpl::IsOffTheRecord() const {
   return false;
 }
 
+content::BrowserContext* ProfileImpl::GetOffTheRecordBrowserContext()  {
+  return GetOffTheRecordProfile();
+}
+
 Profile* ProfileImpl::GetOffTheRecordProfile() {
   if (!off_the_record_profile_) {
     scoped_ptr<Profile> p(CreateOffTheRecordProfile());
@@ -1279,6 +1293,12 @@ void ProfileImpl::UpdateProfileIsEphemeralCache() {
   }
 }
 
+void ProfileImpl::UpdateProfileDefaultTrackingPreference() {
+  PrefService* prefs = GetPrefs();
+  tracking_default_mode = prefs->GetInteger(prefs::kDefaultTrackingPreferenceSetting);
+  LOG(ERROR) << "\tProfileImpl()::UpdateProfileDefaultTrackingPreference() : DefaultBrowsingMode : " << tracking_default_mode << "\n";
+}
+
 // Gets the cache parameters from the command line. If |is_media_context| is
 // set to true then settings for the media context type is what we need,
 // |cache_path| will be set to the user provided path, or will not be touched if
diff --git a/chrome/browser/profiles/profile_impl.h b/chrome/browser/profiles/profile_impl.h
index 2d58c930f8ee30394d424a7ad29b45af3b3a09ca..43594a12d3a1d464ae2ce826dd7721ed538cdfcf 100644
--- a/chrome/browser/profiles/profile_impl.h
+++ b/chrome/browser/profiles/profile_impl.h
@@ -97,6 +97,7 @@ class ProfileImpl : public Profile {
   std::string GetProfileUserName() const override;
   ProfileType GetProfileType() const override;
   bool IsOffTheRecord() const override;
+  content::BrowserContext* GetOffTheRecordBrowserContext() override;
   Profile* GetOffTheRecordProfile() override;
   void DestroyOffTheRecordProfile() override;
   bool HasOffTheRecordProfile() override;
@@ -187,6 +188,7 @@ class ProfileImpl : public Profile {
   void UpdateProfileNameCache();
   void UpdateProfileAvatarCache();
   void UpdateProfileIsEphemeralCache();
+  void UpdateProfileDefaultTrackingPreference();
 
   void GetCacheParameters(bool is_media_context,
                           base::FilePath* cache_path,
diff --git a/chrome/browser/resources/options/content_settings.html b/chrome/browser/resources/options/content_settings.html
index 251ad1212e4b3c603a6386597d8ecdbb9adffded..78b01bd06e61c73806b7342b6c846d71dd454713 100644
--- a/chrome/browser/resources/options/content_settings.html
+++ b/chrome/browser/resources/options/content_settings.html
@@ -599,6 +599,43 @@
         </div>
       </div>
     </section>
+    <!-- Tracking preference filter tab contents -->
+    <section>
+      <h3 i18n-content="trackingTabLabel"></h3>
+      <div>
+        <div class="radio controlled-setting-with-label">
+          <label>
+            <input type="radio" name="tracking" value="allow">
+            <span>
+              <span i18n-content="trackingAllow"></span>
+              <span class="controlled-setting-indicator"
+                  content-setting="tracking" value="allow"></span>
+            </span>
+          </label>
+        </div>
+        <div class="radio controlled-setting-with-label">
+          <label>
+            <input type="radio" name="tracking" value="block">
+            <span>
+              <span i18n-content="trackingBlock"></span>
+              <span class="controlled-setting-indicator"
+                  content-setting="tracking" value="block"></span>
+            </span>
+          </label>
+        </div>
+        <div class="radio controlled-setting-with-label" style="display:none">
+          <label>
+            <input type="radio" name="tracking-category" value="block">
+          </label>
+        </div>
+        <div class="settings-row">
+          <button class="exceptions-list-button" contentType="tracking"
+              i18n-content="manageURLExceptions"></button>
+          <button class="exceptions-list-button" contentType="tracking-category"
+              i18n-content="manageCategoryExceptions"></button>
+        </div>
+     </div>
+    </section>
   </div>
   <div class="action-area">
     <div class="button-strip">
diff --git a/chrome/browser/resources/options/content_settings.js b/chrome/browser/resources/options/content_settings.js
index f77b3f48b9af2a007d971b03e668c9e9c4c86633..bb7e742a073c1e0f5c83a6d783ab9f9dfbb2f303 100644
--- a/chrome/browser/resources/options/content_settings.js
+++ b/chrome/browser/resources/options/content_settings.js
@@ -29,7 +29,9 @@ cr.define('options', function() {
     'images': 'images',
     'plugins': 'plugins',
     'popups': 'popups',
-    'javascript': 'javascript'
+    'javascript': 'javascript',
+    'tracking': 'tracking',
+    'tracking-category': 'trackingCategory',
   };
 
   //////////////////////////////////////////////////////////////////////////////
diff --git a/chrome/browser/resources/options/content_settings_exceptions_area.html b/chrome/browser/resources/options/content_settings_exceptions_area.html
index 3c3daefcf8a1e15639d51e3133e338b292e6a934..ec315e601b759b5f40e5a870bbb8f05a3a07922b 100644
--- a/chrome/browser/resources/options/content_settings_exceptions_area.html
+++ b/chrome/browser/resources/options/content_settings_exceptions_area.html
@@ -144,6 +144,12 @@
         <list mode="otr"></list>
       </div>
     </div>
+    <div contentType="tracking">
+      <list mode="normal"></list>
+    </div>
+    <div contentType="tracking-category">
+      <list mode="normal"></list>
+    </div>
   </div>
   <div class="action-area">
     <div class="hbox stretch">
diff --git a/chrome/browser/resources/options/content_settings_exceptions_area.js b/chrome/browser/resources/options/content_settings_exceptions_area.js
index dc4f56debfd97484631d5b9399df78f777d0ac50..d0aa6e7d08e2de16b19297302cccc5db46517a1c 100644
--- a/chrome/browser/resources/options/content_settings_exceptions_area.js
+++ b/chrome/browser/resources/options/content_settings_exceptions_area.js
@@ -62,6 +62,8 @@ cr.define('options.contentSettings', function() {
       if (this.pattern)
         this.patternLabel = patternCell.querySelector('.static-text');
       var input = patternCell.querySelector('input');
+      if (this.contentType == 'tracking-category')
+        input.setAttribute("readonly", "true");
 
       // TODO(stuartmorgan): Create an createEditableSelectCell abstracting
       // this code.
@@ -78,10 +80,33 @@ cr.define('options.contentSettings', function() {
 
       // Setting select element for edit mode.
       var select = cr.doc.createElement('select');
-      var optionAllow = cr.doc.createElement('option');
-      optionAllow.textContent = loadTimeData.getString('allowException');
-      optionAllow.value = 'allow';
-      select.appendChild(optionAllow);
+
+      if (this.contentType == 'tracking' || this.contentType == 'tracking-category') {
+        var optionAllowHigh = cr.doc.createElement('option');
+        optionAllowHigh.textContent = loadTimeData.getString('allowExceptionHigh');
+        optionAllowHigh.value = 'allow-high priority';
+        select.appendChild(optionAllowHigh);
+      }
+
+      if (this.contentType == 'tracking' || this.contentType == 'tracking-category') {
+        var optionAllowMedium = cr.doc.createElement('option');
+        optionAllowMedium.textContent = loadTimeData.getString('allowExceptionMedium');
+        optionAllowMedium.value = 'allow-medium priority';
+        select.appendChild(optionAllowMedium);
+      }
+      else {
+        var optionAllow = cr.doc.createElement('option');
+        optionAllow.textContent = loadTimeData.getString('allowException');
+        optionAllow.value = 'allow';
+        select.appendChild(optionAllow);
+      }
+
+      if (this.contentType == 'tracking' || this.contentType == 'tracking-category') {
+        var optionAllowLow = cr.doc.createElement('option');
+        optionAllowLow.textContent = loadTimeData.getString('allowExceptionLow');
+        optionAllowLow.value = 'allow-low priority';
+        select.appendChild(optionAllowLow);
+      }
 
       if (this.contentType == 'plugins') {
         var optionDetect = cr.doc.createElement('option');
@@ -97,11 +122,33 @@ cr.define('options.contentSettings', function() {
         select.appendChild(optionSession);
       }
 
+      if (this.contentType == 'tracking' || this.contentType == 'tracking-category') {
+        var optionBlockHigh = cr.doc.createElement('option');
+        optionBlockHigh.textContent = loadTimeData.getString('blockExceptionHigh');
+        optionBlockHigh.value = 'block-high priority';
+        select.appendChild(optionBlockHigh);
+      }
+
       if (this.contentType != 'fullscreen') {
-        var optionBlock = cr.doc.createElement('option');
-        optionBlock.textContent = loadTimeData.getString('blockException');
-        optionBlock.value = 'block';
-        select.appendChild(optionBlock);
+        if (this.contentType == 'tracking' || this.contentType == 'tracking-category') {
+          var optionBlockMedium  = cr.doc.createElement('option');
+          optionBlockMedium.textContent = loadTimeData.getString('blockExceptionMedium');
+          optionBlockMedium.value = 'block-medium priority';
+          select.appendChild(optionBlockMedium);
+        }
+        else {
+          var optionBlock = cr.doc.createElement('option');
+          optionBlock.textContent = loadTimeData.getString('blockException');
+          optionBlock.value = 'block';
+          select.appendChild(optionBlock);
+        }
+      }
+
+      if (this.contentType == 'tracking' || this.contentType == 'tracking-category') {
+        var optionBlockLow = cr.doc.createElement('option');
+        optionBlockLow.textContent = loadTimeData.getString('blockExceptionLow');
+        optionBlockLow.value = 'block-low priority';
+        select.appendChild(optionBlockLow);
       }
 
       if (this.isEmbeddingRule()) {
@@ -115,6 +162,9 @@ cr.define('options.contentSettings', function() {
         this.deletable = false;
         this.editable = false;
       }
+      if (this.contentType == 'tracking-category') {
+        this.deletable = false;
+      }
 
       if (this.contentType != 'zoomlevels') {
         this.addEditField(select, this.settingLabel);
@@ -290,6 +340,18 @@ cr.define('options.contentSettings', function() {
         return loadTimeData.getString('sessionException');
       else if (setting == 'detect')
         return loadTimeData.getString('detectException');
+      else if (setting == 'allow-high priority')
+        return loadTimeData.getString('allowExceptionHigh');
+      else if (setting == 'allow-medium priority')
+        return loadTimeData.getString('allowExceptionMedium');
+      else if (setting == 'allow-low priority')
+        return loadTimeData.getString('allowExceptionLow');
+      else if (setting == 'block-high priority')
+        return loadTimeData.getString('blockExceptionHigh');
+      else if (setting == 'block-medium priority')
+        return loadTimeData.getString('blockExceptionMedium');
+      else if (setting == 'block-low priority')
+        return loadTimeData.getString('blockExceptionLow');
       else if (setting == 'default')
         return '';
 
@@ -515,7 +577,7 @@ cr.define('options.contentSettings', function() {
     setExceptions: function(entries) {
       var deleteCount = this.dataModel.length;
 
-      if (this.isEditable()) {
+      if (this.isEditable() && this.contentType != 'tracking-category') {
         // We don't want to remove the Add New Exception row.
         deleteCount = deleteCount - 1;
       }
diff --git a/chrome/browser/themes/browser_theme_pack.cc b/chrome/browser/themes/browser_theme_pack.cc
index 6d833eb13b18f55d06d9b3d927c568491f22f5b7..56aefbef9a7499b4dfbeb8945014fe09de397435 100644
--- a/chrome/browser/themes/browser_theme_pack.cc
+++ b/chrome/browser/themes/browser_theme_pack.cc
@@ -169,6 +169,9 @@ PersistingImagesTable kPersistingImages[] = {
     {40, IDR_TOOLBAR_BEZEL_HOVER, NULL},
     {41, IDR_TOOLBAR_BEZEL_PRESSED, NULL},
     {42, IDR_TOOLS_BAR, NULL},
+    {43, IDR_SWITCH, NULL},
+    {44, IDR_SWITCH_H, NULL},
+    {45, IDR_SWITCH_P, NULL},
 };
 const size_t kPersistingImagesLength = arraysize(kPersistingImages);
 
diff --git a/chrome/browser/themes/theme_properties.cc b/chrome/browser/themes/theme_properties.cc
index 8e184c0fd456d0c340cf02f7e51963819435734b..2e36ab16079039999f8e4ad972f0e973bd46b01f 100644
--- a/chrome/browser/themes/theme_properties.cc
+++ b/chrome/browser/themes/theme_properties.cc
@@ -129,6 +129,7 @@ const int kToolbarButtonIDs[] = {
   IDR_TOOLS, IDR_TOOLS_H, IDR_TOOLS_P,
   IDR_MENU_DROPARROW,
   IDR_TOOLBAR_BEZEL_HOVER, IDR_TOOLBAR_BEZEL_PRESSED, IDR_TOOLS_BAR,
+  IDR_SWITCH, IDR_SWITCH_H, IDR_SWITCH_P,
 };
 
 SkColor TintForUnderline(SkColor input) {
diff --git a/chrome/browser/ui/browser.cc b/chrome/browser/ui/browser.cc
index 1cc78f27f2e4b6fd4fa11efd14c1bd64a4bf9825..8bb2e27d1e91f461a4ae32eb8688dabd544dacb0 100644
--- a/chrome/browser/ui/browser.cc
+++ b/chrome/browser/ui/browser.cc
@@ -11,11 +11,15 @@
 
 #include <algorithm>
 #include <string>
+#include <map>
+#include <sstream>
+#include <vector>
 
 #include "base/base_paths.h"
 #include "base/bind.h"
 #include "base/command_line.h"
 #include "base/logging.h"
+#include "base/trace_event/tracking_control_trace.h"
 #include "base/metrics/histogram.h"
 #include "base/prefs/pref_service.h"
 #include "base/process/process_info.h"
@@ -154,6 +158,7 @@
 #include "components/bookmarks/browser/bookmark_model.h"
 #include "components/bookmarks/browser/bookmark_utils.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
+#include "components/content_settings/core/common/content_settings.h"
 #include "components/favicon/content/content_favicon_driver.h"
 #include "components/history/core/browser/top_sites.h"
 #include "components/infobars/core/simple_alert_infobar_delegate.h"
@@ -1384,6 +1389,11 @@ WebContents* Browser::OpenURLFromTab(WebContents* source,
 
   chrome::NavigateParams nav_params(this, params.url, params.transition);
   FillNavigateParamsFromOpenURLParams(&nav_params, params);
+
+  // override use_offtherecord_profile and check_user_tracking_preference in this case.
+  nav_params.use_offtherecord_profile = params.use_offtherecord_profile;
+  nav_params.check_user_tracking_preference = params.check_user_tracking_preference;
+
   nav_params.source_contents = source;
   nav_params.tabstrip_add_types = TabStripModel::ADD_NONE;
   if (params.user_gesture)
@@ -1414,6 +1424,147 @@ WebContents* Browser::OpenURLFromTab(WebContents* source,
   return nav_params.target_contents;
 }
 
+void Browser::SwitchProfile() {
+  /*TMON_TRACE("Browser::SwitchProfile");*/
+  /*TMON_TRACE_FLUSH();*/
+  WebContents* active_contents = tab_strip_model_->GetActiveWebContents();
+  OpenURLParams params(active_contents->GetURL(), Referrer(), CURRENT_TAB,
+                  ui::PAGE_TRANSITION_TYPED, false);
+  content::BrowserContext* context = active_contents->GetBrowserContext();
+  params.use_offtherecord_profile = !context->IsOffTheRecord();
+  // The user is manually switching the profile.
+  // Do not need to check user tracking preference.
+  params.check_user_tracking_preference = false;
+  /*LOG(ERROR) << "Browser::SwitchProfile() : "*/
+            //<< active_contents->GetURL() << ", "
+            /*<< params.use_offtherecord_profile << "\n";*/
+  OpenURLFromTab(active_contents, params);
+  return;
+}
+
+void Browser::SwitchProfileWithNewWebContents(WebContents* old_contents,
+                                              bool use_offtherecord_profile) {
+  /*TMON_TRACE("Browser::SwitchProfileWithNewWebContents");*/
+  /*TMON_TRACE_FLUSH();*/
+  // LOG(ERROR) << "Browser::SwitchProfileWithNewWebContents() : "
+  //            << use_offtherecord_profile << "\n";
+  OpenURLParams params(old_contents->GetURL(), Referrer(), CURRENT_TAB,
+                  ui::PAGE_TRANSITION_TYPED, false);
+  params.use_offtherecord_profile = use_offtherecord_profile;
+  // Because the initiating profile is OTR, WebContents* do not
+  // need to check user's tracking preference with the browser
+  // process if params.use_offtherecord_profile is false.
+  params.check_user_tracking_preference = use_offtherecord_profile;
+  OpenURLFromTab(old_contents, params);
+  return;
+}
+
+bool Browser::ShouldUseOffTheRecord(const GURL& url, const std::string& result) {
+  /*TMON_TRACE("Browser::ShouldUseOffTheRecord");*/
+  /*TMON_TRACE_FLUSH();*/
+  /*LOG(ERROR) << "Browser::ShouldUseOffTheRecord() : URL: " << url;*/
+  /*LOG(ERROR) << "Browser::ShouldUseOffTheRecord() : Result: " << result;*/
+  if (!url.has_scheme() || url.SchemeIs("chrome-extension") || url.SchemeIs("chrome-devtools"))
+    return false;
+  if (url.SchemeIs("chrome-search"))
+    return true;
+  if (url.SchemeIs("chrome")) {
+    if (url == GURL("chrome://newtab/"))
+      return true;
+    else
+      return false;
+  }
+  std::vector<GURL> categories;
+  std::stringstream ss(result);
+  std::string item;
+  while (std::getline(ss, item, '\t')) {
+    categories.push_back(GURL("category://"+item));
+  }
+  int max_whitelist_priority = -1;
+  int max_blacklist_priority = -1;
+
+  HostContentSettingsMap* map = profile_->GetHostContentSettingsMap();
+  ContentSetting url_setting = map->GetContentSetting(url, url, CONTENT_SETTINGS_TYPE_TRACKING, std::string());
+  if (url_setting >= CONTENT_SETTING_ALLOW_HIGH) {
+    bool white_list_rule = false;
+    int priority = -1;
+    CheckContentSetting(url_setting, white_list_rule, priority);
+    if (white_list_rule && priority > max_whitelist_priority) {
+      //LOG(ERROR) << "Browser::ShouldUseOffTheRecord() : URL Whitelist: " << priority;
+      max_whitelist_priority = priority;
+    }
+    if (!white_list_rule && priority > max_blacklist_priority) {
+      //LOG(ERROR) << "Browser::ShouldUseOffTheRecord() : URL Blacklist: " << priority;
+      max_blacklist_priority = priority;
+    }
+  }
+
+  for (unsigned i = 0; i < categories.size(); ++i) {
+    ContentSetting category_setting = map->GetContentSetting(categories[i], categories[i], CONTENT_SETTINGS_TYPE_TRACKING_CATEGORY, std::string());
+    if (category_setting != CONTENT_SETTING_DEFAULT) {
+      bool white_list_rule = false;
+      int priority = -1;
+      CheckContentSetting(category_setting, white_list_rule, priority);
+      if (white_list_rule && priority > max_whitelist_priority) {
+        //LOG(ERROR) << "Browser::ShouldUseOffTheRecord() : Category Whitelist: " << categories[i].path() << " : " << priority;
+        max_whitelist_priority = priority;
+      }
+      if (!white_list_rule && priority > max_blacklist_priority) {
+        //LOG(ERROR) << "Browser::ShouldUseOffTheRecord() : Category Blacklist: " << categories[i].path() << " : " << priority;
+        max_blacklist_priority = priority;
+      }
+    }
+    if (max_blacklist_priority == 3)
+      break;
+  }
+
+  /*LOG(ERROR) << "Browser::ShouldUseOffTheRecord() : whitelist_priority=" << max_whitelist_priority*/
+    /*<< ", blacklist_priority=" << max_blacklist_priority;*/
+  if (max_blacklist_priority < 0 && max_whitelist_priority < 0) {
+    if (profile_->tracking_default_mode == CONTENT_SETTING_BLOCK) // BlockTracking: 2
+      return true;
+    else
+      return false;
+  }
+  if (max_blacklist_priority >= max_whitelist_priority)
+    return true;
+  else
+    return false;
+}
+
+void Browser::CheckContentSetting(ContentSetting s, bool &white_list_rule, int &priority) {
+  switch(s) {
+    case CONTENT_SETTING_ALLOW_LOW :
+      priority = 1;
+      white_list_rule = true;
+      break;
+    case CONTENT_SETTING_ALLOW_MEDIUM :
+    case CONTENT_SETTING_ALLOW :
+      priority = 2;
+      white_list_rule = true;
+      break;
+    case CONTENT_SETTING_ALLOW_HIGH :
+      priority = 3;
+      white_list_rule = true;
+      break;
+    case CONTENT_SETTING_BLOCK_LOW :
+      priority = 1;
+      white_list_rule = false;
+      break;
+    case CONTENT_SETTING_BLOCK_MEDIUM :
+    case CONTENT_SETTING_BLOCK :
+      priority = 2;
+      white_list_rule = false;
+      break;
+    case CONTENT_SETTING_BLOCK_HIGH :
+      priority = 3;
+      white_list_rule = false;
+      break;
+    default:
+      break;
+  }
+}
+
 void Browser::NavigationStateChanged(WebContents* source,
                                      content::InvalidateTypes changed_flags) {
   // TODO(erikchen): Remove ScopedTracker below once http://crbug.com/466285
diff --git a/chrome/browser/ui/browser.h b/chrome/browser/ui/browser.h
index c4a3a62c749bc4ac20a06d5bbaea31f5a04c8074..49401396137dab246d72f18bf1e8515118166d07 100644
--- a/chrome/browser/ui/browser.h
+++ b/chrome/browser/ui/browser.h
@@ -489,6 +489,9 @@ class Browser : public TabStripModelObserver,
     return extension_window_controller_.get();
   }
 
+  // Called in chrome/browser/ui/browser_commands.cc
+  void SwitchProfile();
+
  private:
   friend class BrowserTest;
   friend class FullscreenControllerInteractiveTest;
@@ -548,6 +551,15 @@ class Browser : public TabStripModelObserver,
   content::WebContents* OpenURLFromTab(
       content::WebContents* source,
       const content::OpenURLParams& params) override;
+
+  // Called in content/browser/web_contents/web_contents_impl.cc
+  void SwitchProfileWithNewWebContents(content::WebContents* old_contents,
+                                       bool use_offtherecord_profile) override;
+
+  bool ShouldUseOffTheRecord(const GURL& url, const std::string& result) override;
+
+  void CheckContentSetting(ContentSetting s, bool &white_list_rule, int &priority);
+
   void NavigationStateChanged(content::WebContents* source,
                               content::InvalidateTypes changed_flags) override;
   void VisibleSSLStateChanged(const content::WebContents* source) override;
diff --git a/chrome/browser/ui/browser_command_controller.cc b/chrome/browser/ui/browser_command_controller.cc
index ab25a9acb600d22fc0a6020a484a39ebc720ec66..972c5214e527bc2c6d5958f1f84ea0ba8f0b2e17 100644
--- a/chrome/browser/ui/browser_command_controller.cc
+++ b/chrome/browser/ui/browser_command_controller.cc
@@ -397,6 +397,9 @@ void BrowserCommandController::ExecuteCommandWithDisposition(
     case IDC_HOME:
       Home(browser_, disposition);
       break;
+    case IDC_SWITCH:
+      SwitchProfile(browser_);
+      break;
     case IDC_OPEN_CURRENT_URL:
       OpenCurrentURL(browser_);
       break;
@@ -881,6 +884,7 @@ void BrowserCommandController::InitCommandState() {
   command_updater_.UpdateCommandEnabled(IDC_RELOAD, true);
   command_updater_.UpdateCommandEnabled(IDC_RELOAD_IGNORING_CACHE, true);
   command_updater_.UpdateCommandEnabled(IDC_RELOAD_CLEARING_CACHE, true);
+  command_updater_.UpdateCommandEnabled(IDC_SWITCH, true);
 
   // Window management commands
   command_updater_.UpdateCommandEnabled(IDC_CLOSE_WINDOW, true);
diff --git a/chrome/browser/ui/browser_commands.cc b/chrome/browser/ui/browser_commands.cc
index 6c031f3e7974460ed4ed6536d4563f48273fd89d..a26a5cb078a5185d6853e664bb24eb57b5b744a5 100644
--- a/chrome/browser/ui/browser_commands.cc
+++ b/chrome/browser/ui/browser_commands.cc
@@ -467,6 +467,11 @@ void Home(Browser* browser, WindowOpenDisposition disposition) {
   browser->OpenURL(params);
 }
 
+void SwitchProfile(Browser* browser) {
+  content::RecordAction(UserMetricsAction("SwitchProfile"));
+  browser->SwitchProfile();
+}
+
 void OpenCurrentURL(Browser* browser) {
   content::RecordAction(UserMetricsAction("LoadURL"));
   LocationBar* location_bar = browser->window()->GetLocationBar();
diff --git a/chrome/browser/ui/browser_commands.h b/chrome/browser/ui/browser_commands.h
index d14b51677e675f9f86390632273cb878ad56f1ee..921524ce15d2dd1b79790911f37a6dbe3166221f 100644
--- a/chrome/browser/ui/browser_commands.h
+++ b/chrome/browser/ui/browser_commands.h
@@ -69,6 +69,7 @@ void Reload(Browser* browser, WindowOpenDisposition disposition);
 void ReloadIgnoringCache(Browser* browser, WindowOpenDisposition disposition);
 bool CanReload(const Browser* browser);
 void Home(Browser* browser, WindowOpenDisposition disposition);
+void SwitchProfile(Browser* browser);
 void OpenCurrentURL(Browser* browser);
 void Stop(Browser* browser);
 void NewWindow(Browser* browser);
diff --git a/chrome/browser/ui/browser_navigator.cc b/chrome/browser/ui/browser_navigator.cc
index 7be37f78cca1f3e1d9a72658416b78fbfc8748f0..2ef18291fcb742ef0df4814fd066afd198aae402 100644
--- a/chrome/browser/ui/browser_navigator.cc
+++ b/chrome/browser/ui/browser_navigator.cc
@@ -7,6 +7,7 @@
 #include <algorithm>
 
 #include "base/command_line.h"
+#include "base/synchronization/waitable_event.h"
 #include "base/prefs/pref_service.h"
 #include "base/strings/stringprintf.h"
 #include "base/strings/utf_string_conversions.h"
@@ -35,6 +36,8 @@
 #include "content/public/browser/render_view_host.h"
 #include "content/public/browser/web_contents.h"
 
+#include "chrome/common/pref_names.h"
+
 #if defined(USE_ASH)
 #include "chrome/browser/ui/ash/multi_user/multi_user_window_manager.h"
 #endif
@@ -51,6 +54,11 @@
 #include "extensions/common/extension_set.h"
 #endif
 
+#include "chrome/browser/ui/tab_contents/core_tab_helper.h"
+#include "chrome/browser/ui/tab_contents/core_tab_helper_delegate.h"
+#include "chrome/browser/ui/tracking_control.h"
+#include "base/trace_event/tracking_control_trace.h"
+
 using content::GlobalRequestID;
 using content::NavigationController;
 using content::WebContents;
@@ -116,6 +124,36 @@ bool AdjustNavigateParamsForURL(chrome::NavigateParams* params) {
   return true;
 }
 
+// Check if some of the navigation parameters are changed based on the particular URL.
+// Currently this applies to some chrome:// pages which we always want to open
+// in a non-incognito window. Note that even though a ChromeOS guest session is
+// technically an incognito window, these URLs are allowed.
+// Returns true on success. Otherwise, if changing params leads the browser into
+// an erroneous state, returns false.
+bool IsNavigateParamsForURLAdjusted(chrome::NavigateParams* params) {
+  if (params->target_contents != NULL ||
+      chrome::IsURLAllowedInIncognito(params->url,
+                                      params->initiating_profile) ||
+      params->initiating_profile->IsGuestSession()) {
+    return false;
+  }
+
+  Profile* profile = params->initiating_profile;
+
+  if (profile->IsOffTheRecord() || params->disposition == OFF_THE_RECORD) {
+    profile = profile->GetOriginalProfile();
+
+    // If incognito is forced, we punt.
+    PrefService* prefs = profile->GetPrefs();
+    if (prefs && IncognitoModePrefs::GetAvailability(prefs) ==
+        IncognitoModePrefs::FORCED) {
+      return false;
+    }
+  }
+
+  return true;
+}
+
 // Returns a Browser that can host the navigation or tab addition specified in
 // |params|. This might just return the same Browser specified in |params|, or
 // some other if that Browser is deemed incompatible.
@@ -346,9 +384,19 @@ class ScopedTargetContentsOwner {
 
 content::WebContents* CreateTargetContents(const chrome::NavigateParams& params,
                                            const GURL& url) {
-  WebContents::CreateParams create_params(
+  WebContents::CreateParams create_params(nullptr);
+
+  // CreateTargetContents() (last)
+  if (chrome::IsTrackingControlEnabled()) {
+    create_params = WebContents::CreateParams(
+      params.initiating_profile,
+      tab_util::GetSiteInstanceForNewTab(params.initiating_profile, url));
+  } else {
+    create_params = WebContents::CreateParams(
       params.browser->profile(),
       tab_util::GetSiteInstanceForNewTab(params.browser->profile(), url));
+  }
+
   if (params.source_contents) {
     create_params.initial_size =
         params.source_contents->GetContainerBounds().size();
@@ -427,6 +475,8 @@ NavigateParams::NavigateParams(Browser* a_browser,
       initiating_profile(NULL),
       host_desktop_type(GetHostDesktop(a_browser)),
       should_replace_current_entry(false),
+      use_offtherecord_profile(true),
+      check_user_tracking_preference(true),
       created_with_opener(false) {
 }
 
@@ -450,6 +500,8 @@ NavigateParams::NavigateParams(Browser* a_browser,
       initiating_profile(NULL),
       host_desktop_type(GetHostDesktop(a_browser)),
       should_replace_current_entry(false),
+      use_offtherecord_profile(true),
+      check_user_tracking_preference(true),
       created_with_opener(false) {
 }
 
@@ -475,6 +527,8 @@ NavigateParams::NavigateParams(Profile* a_profile,
       initiating_profile(a_profile),
       host_desktop_type(chrome::GetActiveDesktop()),
       should_replace_current_entry(false),
+      use_offtherecord_profile(true),
+      check_user_tracking_preference(true),
       created_with_opener(false) {
 }
 
@@ -498,15 +552,55 @@ void FillNavigateParamsFromOpenURLParams(chrome::NavigateParams* nav_params,
   nav_params->browser_initiated_post_data = params.browser_initiated_post_data;
 }
 
+
 void Navigate(NavigateParams* params) {
+  /*TMON_TRACE("Navigate");*/
+  /*TMON_TRACE_FLUSH();*/
+
   Browser* source_browser = params->browser;
   if (source_browser)
     params->initiating_profile = source_browser->profile();
+
+  WebContents *old_source_contents = params->source_contents;
+  Profile* profile = params->initiating_profile;
+
+  // Navigate() 1
+  if (IsTrackingControlEnabled()) {
+//    if (params->url == GURL("chrome://newtab/"))
+//      params->use_offtherecord_profile = false;
+    if (params->use_offtherecord_profile)
+      profile = params->initiating_profile->GetOffTheRecordProfile();
+    else
+      profile = params->initiating_profile->GetOriginalProfile();
+    params->initiating_profile = profile;
+    /*LOG(ERROR) << "BrowserNavigator()::Navigate()1 : "*/
+               //<< params->url << ", "
+               //<< params->use_offtherecord_profile << ":"
+               /*<< params->check_user_tracking_preference << "\n";*/
+  }
+
+  // if (IsTrackingControlEnabled() && params->use_offtherecord_profile) {
+  //   profile = params->initiating_profile->GetOffTheRecordProfile();
+  //   params->initiating_profile = profile;
+  //   TMON_DEBUG("[Priv] Open [" << params->url << "]\n");
+  // }
+
   DCHECK(params->initiating_profile);
 
   if (!AdjustNavigateParamsForURL(params))
     return;
 
+  // Navigate() 2
+  if (IsTrackingControlEnabled()) {
+    if (IsNavigateParamsForURLAdjusted(params)) {
+      /*LOG(ERROR) << "BrowserNavigator()::Navigate()2 : " */
+                 //<< params->url << ", "
+                 /*<< params->use_offtherecord_profile << "\n";*/
+      params->initiating_profile = profile->GetOriginalProfile();
+      params->use_offtherecord_profile = false;
+    }
+  }
+
 #if defined(ENABLE_EXTENSIONS)
   const extensions::Extension* extension =
     extensions::ExtensionRegistry::Get(params->initiating_profile)->
@@ -553,12 +647,46 @@ void Navigate(NavigateParams* params) {
 #endif
 
   // Navigate() must not return early after this point.
-
-  if (GetSourceProfile(params) != params->browser->profile()) {
-    // A tab is being opened from a link from a different profile, we must reset
-    // source information that may cause state to be shared.
-    params->source_contents = NULL;
-    params->referrer = content::Referrer();
+  // Navigate() 3
+  if (IsTrackingControlEnabled()) {
+    // Set source_contents to NULL will result in a new Tab to be opened.
+    // We should check whether the source profile matches the initiating_profile
+    // rather than the browser profile
+    if (GetSourceProfile(params) != params->initiating_profile) {
+      /*LOG(ERROR) << "BrowserNavigator()::Navigate()3-1 : " */
+                 //<< params->url << ", "
+                 //<< params->use_offtherecord_profile << ":"
+                 /*<< params->check_user_tracking_preference << "\n";*/
+      DCHECK(!old_source_contents && params->source_contents);
+      old_source_contents = params->source_contents;
+      // A tab is being opened from a link from a different profile, we must reset
+      // source information that may cause state to be shared.
+      params->source_contents = NULL;
+      params->referrer = content::Referrer();
+    }
+    else if (params->disposition == CURRENT_TAB) {
+      // We are starting the navigation using the same profile, and
+      // params->check_user_tracking_preference might be true in the
+      // previous navigation. We need to inform WebContents* that the
+      // user may manually start a new navigation not by switching
+      // profile and need to check user's tracking preference with
+      // the browser process in this new navigation.
+      DCHECK(params->source_contents);
+      // We're loading in the current tab, the target is the
+      // same as the source.
+      params->source_contents->SetCheckUserTrackingPreference(params->check_user_tracking_preference);
+      /*LOG(ERROR) << "BrowserNavigator()::Navigate()3-2 : " */
+                 //<< params->url << ", "
+                 //<< params->use_offtherecord_profile << ":"
+                 /*<< params->check_user_tracking_preference << "\n";*/
+    }
+  } else {
+    if (GetSourceProfile(params) != params->browser->profile()) {
+      // A tab is being opened from a link from a different profile, we must reset
+      // source information that may cause state to be shared.
+      params->source_contents = NULL;
+      params->referrer = content::Referrer();
+    }
   }
 
   // Make sure the Browser is shown if params call for it.
@@ -610,11 +738,43 @@ void Navigate(NavigateParams* params) {
   if (!params->target_contents && singleton_index < 0) {
     DCHECK(!params->url.is_empty());
     if (params->disposition != CURRENT_TAB) {
-      params->target_contents = CreateTargetContents(*params, params->url);
 
-      // This function takes ownership of |params->target_contents| until it
-      // is added to a TabStripModel.
-      target_contents_owner.TakeOwnership();
+      // Navigate() 4
+      if (IsTrackingControlEnabled() 
+          && !params->url.SchemeIs("chrome")
+          && old_source_contents 
+          && !params->source_contents) {
+        // We are navigating using a different profile in current tab
+        // Create a new target_contents, replace the source_contents 
+        // with the newly created target_contents, destroy the old
+        // source_contents
+        DCHECK(old_source_contents) << "target, source, old_source "
+                                    << params->target_contents << ","
+                                    << params->source_contents << ","
+                                    << old_source_contents;
+        /*LOG(ERROR) << "BrowserNavigator()::Navigate()4 : " */
+                   //<< params->url << ", "
+                   /*<< params->use_offtherecord_profile << "\n";*/
+        WebContents *new_target_contents = CreateTargetContents(*params, params->url);
+        CoreTabHelper::FromWebContents(old_source_contents)->delegate()->SwapTabContents(
+          old_source_contents, new_target_contents, false, false);
+        params->target_contents = new_target_contents;
+        params->source_contents = params->target_contents;
+        params->disposition = CURRENT_TAB;
+        if (old_source_contents->NeedToFireBeforeUnload()) {
+          //LOG(ERROR) << "BrowserNavigator()::Navigate()5 : old_source_contents NeedToFireBeforeUnload" << "\n";
+          old_source_contents->DispatchBeforeUnload(false);
+        }
+        old_source_contents->SetDelegate(NULL);
+        delete old_source_contents;
+        old_source_contents = NULL;
+        params->target_contents->SetCheckUserTrackingPreference(params->check_user_tracking_preference);
+      } else {
+        params->target_contents = CreateTargetContents(*params, params->url);
+        // This function takes ownership of |params->target_contents| until it
+        // is added to a TabStripModel.
+        target_contents_owner.TakeOwnership();
+      }
     } else {
       // ... otherwise if we're loading in the current tab, the target is the
       // same as the source.
diff --git a/chrome/browser/ui/browser_navigator.h b/chrome/browser/ui/browser_navigator.h
index 07754c72fa0450c5d7f1a801949f1b867697ca71..3fd94019f2cf30f0d8d611e773ee6a06921db08a 100644
--- a/chrome/browser/ui/browser_navigator.h
+++ b/chrome/browser/ui/browser_navigator.h
@@ -231,6 +231,10 @@ struct NavigateParams {
   // navigation entry.
   bool should_replace_current_entry;
 
+  bool use_offtherecord_profile;
+
+  bool check_user_tracking_preference;
+
   // Indicates whether |target_contents| is being created with a window.opener.
   bool created_with_opener;
 
diff --git a/chrome/browser/ui/browser_window.h b/chrome/browser/ui/browser_window.h
index 142a44a8be4e3486aa615b5ebc6108b9b97dcb71..71d2b0b35b485ce7d2d92f707f2dad52f8e21a56 100644
--- a/chrome/browser/ui/browser_window.h
+++ b/chrome/browser/ui/browser_window.h
@@ -119,6 +119,8 @@ class BrowserWindow : public ui::BaseWindow {
                                   int index,
                                   int reason) = 0;
 
+  virtual void OnProfileSwitched(bool use_offtherecord_profile) = 0;
+
   // Called to force the zoom state to for the active tab to be recalculated.
   // |can_show_bubble| is true when a user presses the zoom up or down keyboard
   // shortcuts and will be false in other cases (e.g. switching tabs, "clicking"
diff --git a/chrome/browser/ui/cocoa/browser_window_cocoa.h b/chrome/browser/ui/cocoa/browser_window_cocoa.h
index 5c2b165cf00de711cfce6d45535c058e10db935b..15759098e57999434277413a43f4848eead1bc35 100644
--- a/chrome/browser/ui/cocoa/browser_window_cocoa.h
+++ b/chrome/browser/ui/cocoa/browser_window_cocoa.h
@@ -67,6 +67,7 @@ class BrowserWindowCocoa
                           content::WebContents* new_contents,
                           int index,
                           int reason) override;
+  void OnProfileSwitched(bool use_offtherecord_profile) override;
   void ZoomChangedForActiveTab(bool can_show_bubble) override;
   gfx::Rect GetRestoredBounds() const override;
   ui::WindowShowState GetRestoredState() const override;
diff --git a/chrome/browser/ui/cocoa/browser_window_cocoa.mm b/chrome/browser/ui/cocoa/browser_window_cocoa.mm
index aeeb27431f586ed7e33ab4112f62e140fa26dae1..2e0da4fdb2ca3ce0cf37d74e983367da65fdf1fe 100644
--- a/chrome/browser/ui/cocoa/browser_window_cocoa.mm
+++ b/chrome/browser/ui/cocoa/browser_window_cocoa.mm
@@ -339,6 +339,20 @@ void BrowserWindowCocoa::OnActiveTabChanged(content::WebContents* old_contents,
   // not obvious to me why Mac doesn't handle tab changes in BrowserWindow the
   // way views and GTK do.
   // See http://crbug.com/340720 for discussion.
+  bool new_contents_is_offtherecord = new_contents->GetBrowserContext()->IsOffTheRecord();
+  bool old_contents_is_offtherecord = false;
+  if (old_contents)
+    old_contents_is_offtherecord = old_contents->GetBrowserContext()->IsOffTheRecord();
+  if (new_contents_is_offtherecord && !old_contents_is_offtherecord) {
+    OnProfileSwitched(true);
+  }
+  if (!new_contents_is_offtherecord && old_contents_is_offtherecord) {
+    OnProfileSwitched(false);
+  }
+}
+
+void BrowserWindowCocoa::OnProfileSwitched(bool use_offtherecord_profile) {
+  [controller_ onProfileSwitched:use_offtherecord_profile];
 }
 
 void BrowserWindowCocoa::ZoomChangedForActiveTab(bool can_show_bubble) {
diff --git a/chrome/browser/ui/cocoa/browser_window_controller.h b/chrome/browser/ui/cocoa/browser_window_controller.h
index 54e759daa532d2a71061c61944e2f77491b7cf52..fc71e54a740ad9f20fea41d514be7b2b2c572224 100644
--- a/chrome/browser/ui/cocoa/browser_window_controller.h
+++ b/chrome/browser/ui/cocoa/browser_window_controller.h
@@ -183,6 +183,8 @@ class Command;
 
   // Whether the root view of the window is layer backed.
   BOOL windowViewWantsLayer_;
+
+  BOOL is_offtherecord_;
 }
 
 // A convenience class method which gets the |BrowserWindowController| for a
@@ -258,6 +260,11 @@ class Command;
 - (void)onActiveTabChanged:(content::WebContents*)oldContents
                         to:(content::WebContents*)newContents;
 
+// Invoked via BrowserWindowCocoa::OnProfileSwitched, happens whenever a
+// new tab becomes active and the associated profile is different from
+// that of the previous active tab.
+- (void)onProfileSwitched:(BOOL)use_offtherecord_profile;
+
 // Happens when the zoom level is changed in the active tab, the active tab is
 // changed, or a new browser window or tab is created. |canShowBubble| denotes
 // whether it would be appropriate to show a zoom bubble or not.
diff --git a/chrome/browser/ui/cocoa/browser_window_controller.mm b/chrome/browser/ui/cocoa/browser_window_controller.mm
index 06b489a2102add1b4e595db411add4d15e57a7b1..a879df1447fcbbbe04e5ca0f7ce10311f1c88ffa 100644
--- a/chrome/browser/ui/cocoa/browser_window_controller.mm
+++ b/chrome/browser/ui/cocoa/browser_window_controller.mm
@@ -98,6 +98,8 @@
 #include "ui/base/l10n/l10n_util_mac.h"
 #include "ui/gfx/mac/scoped_ns_disable_screen_updates.h"
 
+#include "base/logging.h"
+
 using bookmarks::BookmarkModel;
 using bookmarks::BookmarkNode;
 using l10n_util::GetStringUTF16;
@@ -417,6 +419,7 @@ using content::WebContents;
             extensions::ExtensionKeybindingRegistry::ALL_EXTENSIONS,
             windowShim_.get()));
 
+    is_offtherecord_ = YES;
     // We are done initializing now.
     initializing_ = NO;
   }
@@ -1286,6 +1289,17 @@ using content::WebContents;
   }
 }
 
+- (void)onProfileSwitched:(BOOL)use_offtherecord_profile {
+  /*if (use_offtherecord_profile)*/
+    //LOG(ERROR) << "BrowserWindowControler::onProfileSwitched: 1";
+  //else
+    /*LOG(ERROR) << "BrowserWindowControler::onProfileSwitched: 0";*/
+  is_offtherecord_ = use_offtherecord_profile;
+  id view = [self tabStripBackgroundView];
+  if ([view conformsToProtocol:@protocol(ThemedWindowDrawing)])
+    [view windowDidChangeTheme];
+}
+
 - (void)zoomChangedForActiveTab:(BOOL)canShowBubble {
   [toolbarController_ zoomChangedForActiveTab:canShowBubble];
 }
@@ -1714,7 +1728,7 @@ using content::WebContents;
 
 - (ThemedWindowStyle)themedWindowStyle {
   ThemedWindowStyle style = 0;
-  if (browser_->profile()->IsOffTheRecord())
+  if (is_offtherecord_)
     style |= THEMED_INCOGNITO;
 
   if (browser_->is_devtools())
diff --git a/chrome/browser/ui/cocoa/content_settings/content_setting_bubble_cocoa.mm b/chrome/browser/ui/cocoa/content_settings/content_setting_bubble_cocoa.mm
index e934d90386a2eb17ab620d96383ec93921b12659..e586fedcd2abfc6cddee90def1795bc041e25ce4 100644
--- a/chrome/browser/ui/cocoa/content_settings/content_setting_bubble_cocoa.mm
+++ b/chrome/browser/ui/cocoa/content_settings/content_setting_bubble_cocoa.mm
@@ -286,6 +286,8 @@ class ContentSettingBubbleWebContentsObserverBridge
     case CONTENT_SETTINGS_TYPE_PUSH_MESSAGING:
     case CONTENT_SETTINGS_TYPE_SSL_CERT_DECISIONS:
     case CONTENT_SETTINGS_TYPE_APP_BANNER:
+    case CONTENT_SETTINGS_TYPE_TRACKING:
+    case CONTENT_SETTINGS_TYPE_TRACKING_CATEGORY:
       NOTREACHED();
   }
   if ((self = [super initWithWindowNibPath:nibPath
diff --git a/chrome/browser/ui/cocoa/toolbar/toolbar_controller.h b/chrome/browser/ui/cocoa/toolbar/toolbar_controller.h
index 46c8e3625da0ed6e9fd906baa5d5b81233014663..8a3f654b9d98f08919d1a7e8c14d3f9e2f143fb3 100644
--- a/chrome/browser/ui/cocoa/toolbar/toolbar_controller.h
+++ b/chrome/browser/ui/cocoa/toolbar/toolbar_controller.h
@@ -52,6 +52,7 @@ class NotificationBridge;
   IBOutlet MenuButton* backButton_;
   IBOutlet MenuButton* forwardButton_;
   IBOutlet ReloadButton* reloadButton_;
+  IBOutlet ToolbarButton* switchButton_;
   IBOutlet ToolbarButton* homeButton_;
   IBOutlet MenuButton* wrenchButton_;
   IBOutlet AutocompleteTextField* locationBar_;
diff --git a/chrome/browser/ui/cocoa/toolbar/toolbar_controller.mm b/chrome/browser/ui/cocoa/toolbar/toolbar_controller.mm
index 12feb683f90301b2cddbb84137f1387628ad4eb7..43031131c741ab5a50c0fb406358b25461155b4c 100644
--- a/chrome/browser/ui/cocoa/toolbar/toolbar_controller.mm
+++ b/chrome/browser/ui/cocoa/toolbar/toolbar_controller.mm
@@ -198,6 +198,7 @@ class NotificationBridge : public WrenchMenuBadgeController::Delegate {
     commandObserver_->ObserveCommand(IDC_BACK);
     commandObserver_->ObserveCommand(IDC_FORWARD);
     commandObserver_->ObserveCommand(IDC_RELOAD);
+    commandObserver_->ObserveCommand(IDC_SWITCH);
     commandObserver_->ObserveCommand(IDC_HOME);
     commandObserver_->ObserveCommand(IDC_BOOKMARK_PAGE);
   }
@@ -226,6 +227,7 @@ class NotificationBridge : public WrenchMenuBadgeController::Delegate {
   // |browserActionsContainerView_| are handled by themselves.
   view_id_util::UnsetID(backButton_);
   view_id_util::UnsetID(forwardButton_);
+  view_id_util::UnsetID(switchButton_);
   view_id_util::UnsetID(homeButton_);
   view_id_util::UnsetID(wrenchButton_);
 
@@ -270,6 +272,13 @@ class NotificationBridge : public WrenchMenuBadgeController::Delegate {
   [[reloadButton_ cell] setImageID:IDR_RELOAD_P
                     forButtonState:image_button_cell::kPressedState];
 
+  [[switchButton_ cell] setImageID:IDR_SWITCH
+                  forButtonState:image_button_cell::kDefaultState];
+  [[switchButton_ cell] setImageID:IDR_SWITCH_H
+                  forButtonState:image_button_cell::kHoverState];
+  [[switchButton_ cell] setImageID:IDR_SWITCH_P
+                  forButtonState:image_button_cell::kPressedState];
+
   [[homeButton_ cell] setImageID:IDR_HOME
                   forButtonState:image_button_cell::kDefaultState];
   [[homeButton_ cell] setImageID:IDR_HOME_H
@@ -296,6 +305,7 @@ class NotificationBridge : public WrenchMenuBadgeController::Delegate {
   [backButton_ setHandleMiddleClick:YES];
   [forwardButton_ setHandleMiddleClick:YES];
   [reloadButton_ setHandleMiddleClick:YES];
+  [switchButton_ setHandleMiddleClick:YES];
   [homeButton_ setHandleMiddleClick:YES];
 
   [self initCommandStatus:commands_];
@@ -362,6 +372,7 @@ class NotificationBridge : public WrenchMenuBadgeController::Delegate {
   // |browserActionsContainerView_| are handled by themselves.
   view_id_util::SetID(backButton_, VIEW_ID_BACK_BUTTON);
   view_id_util::SetID(forwardButton_, VIEW_ID_FORWARD_BUTTON);
+  view_id_util::SetID(switchButton_, VIEW_ID_SWITCH_BUTTON);
   view_id_util::SetID(homeButton_, VIEW_ID_HOME_BUTTON);
   view_id_util::SetID(wrenchButton_, VIEW_ID_APP_MENU);
 
@@ -382,6 +393,10 @@ class NotificationBridge : public WrenchMenuBadgeController::Delegate {
   [[reloadButton_ cell]
       accessibilitySetOverrideValue:description
                        forAttribute:NSAccessibilityDescriptionAttribute];
+  description = l10n_util::GetNSStringWithFixup(IDS_ACCNAME_SWITCH);
+  [[switchButton_ cell]
+      accessibilitySetOverrideValue:description
+                       forAttribute:NSAccessibilityDescriptionAttribute];
   description = l10n_util::GetNSStringWithFixup(IDS_ACCNAME_HOME);
   [[homeButton_ cell]
       accessibilitySetOverrideValue:description
@@ -453,6 +468,9 @@ class NotificationBridge : public WrenchMenuBadgeController::Delegate {
     case IDC_HOME:
       button = homeButton_;
       break;
+    case IDC_SWITCH:
+      button = switchButton_;
+      break;
   }
   [button setEnabled:enabled];
 }
@@ -464,6 +482,7 @@ class NotificationBridge : public WrenchMenuBadgeController::Delegate {
   [forwardButton_
       setEnabled:commands->IsCommandEnabled(IDC_FORWARD) ? YES : NO];
   [reloadButton_ setEnabled:YES];
+  [switchButton_ setEnabled:YES];
   [homeButton_ setEnabled:commands->IsCommandEnabled(IDC_HOME) ? YES : NO];
 }
 
@@ -565,7 +584,7 @@ class NotificationBridge : public WrenchMenuBadgeController::Delegate {
 // Returns an array of views in the order of the outlets above.
 - (NSArray*)toolbarViews {
   return [NSArray arrayWithObjects:backButton_, forwardButton_, reloadButton_,
-             homeButton_, wrenchButton_, locationBar_,
+             switchButton_, homeButton_, wrenchButton_, locationBar_,
              browserActionsContainerView_, nil];
 }
 
diff --git a/chrome/browser/ui/tracking_control.cc b/chrome/browser/ui/tracking_control.cc
new file mode 100644
index 0000000000000000000000000000000000000000..5a6140ecc15d27614c44deb78ee2649a0d3e659a
--- /dev/null
+++ b/chrome/browser/ui/tracking_control.cc
@@ -0,0 +1,21 @@
+#include "chrome/browser/ui/tracking_control.h"
+#include "base/environment.h"
+
+namespace chrome {
+// TODO
+
+bool IsTrackingControlEnabled() 
+{
+  static bool initialized = false;
+  static bool enabled = false;
+
+  if (initialized)
+    return enabled;
+  base::Environment *env = base::Environment::Create();
+  enabled = env->HasVar("TRACKING_CONTROL");
+  initialized = true;
+  return enabled;
+}
+
+} // namespace chrome
+
diff --git a/chrome/browser/ui/tracking_control.h b/chrome/browser/ui/tracking_control.h
new file mode 100644
index 0000000000000000000000000000000000000000..9ab696de1eb46d96c4dba777e8736e0d32d92cb7
--- /dev/null
+++ b/chrome/browser/ui/tracking_control.h
@@ -0,0 +1,14 @@
+#ifndef TrackingControl_h
+#define TrackingControl_h
+
+namespace chrome {
+
+#define TMON_ERROR(msg) LOG(ERROR) << "(ERROR):" << msg;
+#define TMON_DEBUG(msg) LOG(ERROR) << msg;
+#define TMON_MSG(msg) LOG(ERROR) << msg;
+ 
+bool IsTrackingControlEnabled(); 
+
+}
+
+#endif // TrackingControl_h
diff --git a/chrome/browser/ui/view_ids.h b/chrome/browser/ui/view_ids.h
index e396b9cac71abd286b3be718995b3cb576ca3dbb..53ab2110e00460ecf001efb31ed81f062d30ef68 100644
--- a/chrome/browser/ui/view_ids.h
+++ b/chrome/browser/ui/view_ids.h
@@ -51,6 +51,7 @@ enum ViewID {
   VIEW_ID_BACK_BUTTON,
   VIEW_ID_FORWARD_BUTTON,
   VIEW_ID_RELOAD_BUTTON,
+  VIEW_ID_SWITCH_BUTTON,
   VIEW_ID_HOME_BUTTON,
   VIEW_ID_STAR_BUTTON,
   VIEW_ID_APP_MENU,
diff --git a/chrome/browser/ui/views/frame/browser_frame.cc b/chrome/browser/ui/views/frame/browser_frame.cc
index 2752e42e2619ba3a380409d48b0dfbfbd222284d..96681128d42147be69426e325023c6e4835d29c3 100644
--- a/chrome/browser/ui/views/frame/browser_frame.cc
+++ b/chrome/browser/ui/views/frame/browser_frame.cc
@@ -248,3 +248,7 @@ NewAvatarButton* BrowserFrame::GetNewAvatarMenuButton() {
 bool BrowserFrame::ShouldLeaveOffsetNearTopBorder() {
   return !IsMaximized();
 }
+
+void BrowserFrame::OnProfileSwitched(bool use_offtherecord_profile) {
+  browser_frame_view_->OnProfileSwitched(use_offtherecord_profile);
+}
diff --git a/chrome/browser/ui/views/frame/browser_frame.h b/chrome/browser/ui/views/frame/browser_frame.h
index 502b47b18dc4166b00a3478492b1f55bda887a88..b12b8e2fe173b6f9ee9deb25143a3ff693639b81 100644
--- a/chrome/browser/ui/views/frame/browser_frame.h
+++ b/chrome/browser/ui/views/frame/browser_frame.h
@@ -121,6 +121,8 @@ class BrowserFrame
   // Note that in multi user mode this will upon each call create a new model.
   ui::MenuModel* GetSystemMenuModel();
 
+  void OnProfileSwitched(bool use_offtherecord_profile);
+
  private:
   NativeBrowserFrame* native_browser_frame_;
 
diff --git a/chrome/browser/ui/views/frame/browser_non_client_frame_view.cc b/chrome/browser/ui/views/frame/browser_non_client_frame_view.cc
index ba42d91f72f012c7102190799b6d4e82fa791f75..4fcede47297bb6bc0946da8bb25a213a7f9beba2 100644
--- a/chrome/browser/ui/views/frame/browser_non_client_frame_view.cc
+++ b/chrome/browser/ui/views/frame/browser_non_client_frame_view.cc
@@ -28,6 +28,8 @@
 #include "ui/resources/grit/ui_resources.h"
 #include "ui/views/background.h"
 
+#include "base/logging.h"
+
 #if defined(ENABLE_SUPERVISED_USERS)
 #include "chrome/browser/ui/views/profiles/supervised_user_avatar_label.h"
 #endif
@@ -47,6 +49,7 @@ BrowserNonClientFrameView::BrowserNonClientFrameView(BrowserFrame* frame,
         g_browser_process->profile_manager()->GetProfileInfoCache();
     cache.AddObserver(this);
   }
+  is_offtherecord_ = browser_view_->IsOffTheRecord();
 }
 
 BrowserNonClientFrameView::~BrowserNonClientFrameView() {
@@ -105,7 +108,7 @@ bool BrowserNonClientFrameView::ShouldPaintAsThemed() const {
 }
 
 SkColor BrowserNonClientFrameView::GetFrameColor() const {
-  const bool incognito = browser_view_->IsOffTheRecord();
+  const bool incognito = is_offtherecord_;
   ThemeProperties::OverwritableByUserThemeProperty color_id;
   if (ShouldPaintAsActive()) {
     color_id = incognito ? ThemeProperties::COLOR_FRAME_INCOGNITO
@@ -119,7 +122,7 @@ SkColor BrowserNonClientFrameView::GetFrameColor() const {
 }
 
 gfx::ImageSkia* BrowserNonClientFrameView::GetFrameImage() const {
-  const bool incognito = browser_view_->IsOffTheRecord();
+  const bool incognito = is_offtherecord_;
   int resource_id;
   if (browser_view_->IsBrowserTypeNormal()) {
     if (ShouldPaintAsActive()) {
@@ -259,6 +262,10 @@ void BrowserNonClientFrameView::UpdateNewAvatarButton(
   }
 }
 
+void BrowserNonClientFrameView::OnProfileSwitched(bool use_offtherecord_profile) {
+  is_offtherecord_ = use_offtherecord_profile;
+}
+
 void BrowserNonClientFrameView::OnProfileAdded(
     const base::FilePath& profile_path) {
   UpdateTaskbarDecoration();
diff --git a/chrome/browser/ui/views/frame/browser_non_client_frame_view.h b/chrome/browser/ui/views/frame/browser_non_client_frame_view.h
index 6b70655ad134b557dce31628c660c1711c08507e..013c3e33b3d3f926a0247af85258c2d65fba7d6e 100644
--- a/chrome/browser/ui/views/frame/browser_non_client_frame_view.h
+++ b/chrome/browser/ui/views/frame/browser_non_client_frame_view.h
@@ -63,6 +63,8 @@ class BrowserNonClientFrameView : public views::NonClientFrameView,
   void VisibilityChanged(views::View* starting_from, bool is_visible) override;
   void ChildPreferredSizeChanged(View* child) override;
 
+  void OnProfileSwitched(bool use_offtherecord_profile);
+
  protected:
   BrowserView* browser_view() const { return browser_view_; }
   BrowserFrame* frame() const { return frame_; }
@@ -124,6 +126,8 @@ class BrowserNonClientFrameView : public views::NonClientFrameView,
   // Menu button that displays the name of the active or guest profile.
   // May be null and will not be displayed for off the record profiles.
   NewAvatarButton* new_avatar_button_;
+
+  bool is_offtherecord_;
 };
 
 namespace chrome {
diff --git a/chrome/browser/ui/views/frame/browser_view.cc b/chrome/browser/ui/views/frame/browser_view.cc
index b5c17fb15e71e9b7e202041aa9628d64a321b239..05a27ba84ac8853d517fa38c600e4e421008d5ea 100644
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -163,6 +163,8 @@
 #include "chrome/browser/ui/ash/multi_user/multi_user_window_manager.h"
 #endif
 
+#include "chrome/browser/ui/tracking_control.h"
+
 using base::TimeDelta;
 using base::UserMetricsAction;
 using content::NativeWebKeyboardEvent;
@@ -901,10 +903,28 @@ void BrowserView::OnActiveTabChanged(content::WebContents* old_contents,
   // Update all the UI bits.
   UpdateTitleBar();
 
+  if (chrome::IsTrackingControlEnabled()) {
+    bool new_contents_is_offtherecord = new_contents->GetBrowserContext()->IsOffTheRecord();
+    bool old_contents_is_offtherecord = false;
+    if (old_contents)
+      old_contents_is_offtherecord = old_contents->GetBrowserContext()->IsOffTheRecord();
+    if (new_contents_is_offtherecord && !old_contents_is_offtherecord) {
+      OnProfileSwitched(true);
+    }
+    if (!new_contents_is_offtherecord && old_contents_is_offtherecord) {
+      OnProfileSwitched(false);
+    }
+  }
+
   TranslateBubbleView::CloseBubble();
   ZoomBubbleView::CloseBubble();
 }
 
+void BrowserView::OnProfileSwitched(bool use_offtherecord_profile) {
+  //LOG(ERROR) << "BrowserView::OnProfileSwitched(): " << use_offtherecord_profile << "\n";
+  frame_->OnProfileSwitched(use_offtherecord_profile);
+}
+
 void BrowserView::ZoomChangedForActiveTab(bool can_show_bubble) {
   GetLocationBarView()->ZoomChangedForActiveTab(
       can_show_bubble && !toolbar_->IsWrenchMenuShowing());
diff --git a/chrome/browser/ui/views/frame/browser_view.h b/chrome/browser/ui/views/frame/browser_view.h
index e47464aa7fb478b9c91284d5b7a995febe76a1c0..b90506552917f5f448824176c22071b399f1060f 100644
--- a/chrome/browser/ui/views/frame/browser_view.h
+++ b/chrome/browser/ui/views/frame/browser_view.h
@@ -260,6 +260,7 @@ class BrowserView : public BrowserWindow,
                           content::WebContents* new_contents,
                           int index,
                           int reason) override;
+  void OnProfileSwitched(bool use_offtherecord_profile) override;
   void ZoomChangedForActiveTab(bool can_show_bubble) override;
   gfx::Rect GetRestoredBounds() const override;
   ui::WindowShowState GetRestoredState() const override;
diff --git a/chrome/browser/ui/views/toolbar/toolbar_view.cc b/chrome/browser/ui/views/toolbar/toolbar_view.cc
index 0de1e62a1cbae24649a066dc7007e16010f29749..340fe849e36fce7eb86bf7e19e8251efabe95589 100644
--- a/chrome/browser/ui/views/toolbar/toolbar_view.cc
+++ b/chrome/browser/ui/views/toolbar/toolbar_view.cc
@@ -124,6 +124,7 @@ ToolbarView::ToolbarView(Browser* browser)
     : back_(NULL),
       forward_(NULL),
       reload_(NULL),
+      switch_(NULL),
       home_(NULL),
       location_bar_(NULL),
       browser_actions_(NULL),
@@ -138,6 +139,7 @@ ToolbarView::ToolbarView(Browser* browser)
   chrome::AddCommandObserver(browser_, IDC_BACK, this);
   chrome::AddCommandObserver(browser_, IDC_FORWARD, this);
   chrome::AddCommandObserver(browser_, IDC_RELOAD, this);
+  chrome::AddCommandObserver(browser_, IDC_SWITCH, this);
   chrome::AddCommandObserver(browser_, IDC_HOME, this);
   chrome::AddCommandObserver(browser_, IDC_LOAD_NEW_TAB_PAGE, this);
 
@@ -199,6 +201,15 @@ void ToolbarView::Init() {
   reload_->set_id(VIEW_ID_RELOAD_BUTTON);
   reload_->Init();
 
+  switch_ = new ToolbarButton(this, NULL);
+  switch_->set_triggerable_event_flags(
+      ui::EF_LEFT_MOUSE_BUTTON | ui::EF_MIDDLE_MOUSE_BUTTON);
+  switch_->set_tag(IDC_SWITCH);
+  switch_->SetTooltipText(l10n_util::GetStringUTF16(IDS_TOOLTIP_SWITCH));
+  switch_->SetAccessibleName(l10n_util::GetStringUTF16(IDS_ACCNAME_SWITCH));
+  switch_->set_id(VIEW_ID_SWITCH_BUTTON);
+  switch_->Init();
+
   home_ = new HomeButton(this, browser_);
   home_->set_triggerable_event_flags(
       ui::EF_LEFT_MOUSE_BUTTON | ui::EF_MIDDLE_MOUSE_BUTTON);
@@ -222,6 +233,7 @@ void ToolbarView::Init() {
   AddChildView(back_);
   AddChildView(forward_);
   AddChildView(reload_);
+  AddChildView(switch_);
   AddChildView(home_);
   AddChildView(location_bar_);
   AddChildView(browser_actions_);
@@ -443,6 +455,9 @@ void ToolbarView::EnabledStateChangedForCommand(int id, bool enabled) {
     case IDC_RELOAD:
       button = reload_;
       break;
+    case IDC_SWITCH:
+      button = switch_;
+      break;
     case IDC_HOME:
       button = home_;
       break;
@@ -500,6 +515,7 @@ gfx::Size ToolbarView::GetPreferredSize() const {
     int content_width = kLeftEdgeSpacing + back_->GetPreferredSize().width() +
         forward_->GetPreferredSize().width() +
         reload_->GetPreferredSize().width() +
+        switch_->GetPreferredSize().width() +
         (show_home_button_.GetValue() ? home_->GetPreferredSize().width() : 0) +
         kStandardSpacing + browser_actions_->GetPreferredSize().width() +
         app_menu_->GetPreferredSize().width() + kRightEdgeSpacing;
@@ -513,6 +529,7 @@ gfx::Size ToolbarView::GetMinimumSize() const {
   if (is_display_mode_normal()) {
     int content_width = kLeftEdgeSpacing + back_->GetMinimumSize().width() +
         forward_->GetMinimumSize().width() + reload_->GetMinimumSize().width() +
+        switch_->GetMinimumSize().width() +
         (show_home_button_.GetValue() ? home_->GetMinimumSize().width() : 0) +
         kStandardSpacing + browser_actions_->GetMinimumSize().width() +
         app_menu_->GetMinimumSize().width() + kRightEdgeSpacing;
@@ -565,6 +582,10 @@ void ToolbarView::Layout() {
                      reload_->GetPreferredSize().width(), child_height);
   next_element_x = reload_->bounds().right();
 
+  switch_->SetBounds(next_element_x, child_y,
+                     switch_->GetPreferredSize().width(), child_height);
+  next_element_x = switch_->bounds().right();
+
   if (show_home_button_.GetValue() ||
       (browser_->is_app() && extensions::util::IsNewBookmarkAppsEnabled())) {
     home_->SetVisible(true);
@@ -764,6 +785,9 @@ void ToolbarView::LoadImages() {
 
   reload_->LoadImages();
 
+  switch_->SetImage(views::Button::STATE_NORMAL,
+                  *(tp->GetImageSkiaNamed(IDR_SWITCH)));
+
   home_->SetImage(views::Button::STATE_NORMAL,
                   *(tp->GetImageSkiaNamed(IDR_HOME)));
 }
diff --git a/chrome/browser/ui/views/toolbar/toolbar_view.h b/chrome/browser/ui/views/toolbar/toolbar_view.h
index 16631f9a140a39d468190ba99372e086dbbfcd23..02519bd5c9227d1ce428c928ab8e4a4ca62044b0 100644
--- a/chrome/browser/ui/views/toolbar/toolbar_view.h
+++ b/chrome/browser/ui/views/toolbar/toolbar_view.h
@@ -226,6 +226,7 @@ class ToolbarView : public views::AccessiblePaneView,
   BackButton* back_;
   ToolbarButton* forward_;
   ReloadButton* reload_;
+  ToolbarButton* switch_;
   HomeButton* home_;
   LocationBarView* location_bar_;
   BrowserActionsContainer* browser_actions_;
diff --git a/chrome/browser/ui/website_settings/website_settings_ui.cc b/chrome/browser/ui/website_settings/website_settings_ui.cc
index a186b083515021e26dccc5557a2893554ae49469..29d7daf656d67054fd6b25b83ccbedad35401425 100644
--- a/chrome/browser/ui/website_settings/website_settings_ui.cc
+++ b/chrome/browser/ui/website_settings/website_settings_ui.cc
@@ -24,6 +24,12 @@ const int kPermissionButtonTextIDPolicyManaged[] = {
     IDS_WEBSITE_SETTINGS_BUTTON_TEXT_BLOCKED_BY_POLICY,
     IDS_WEBSITE_SETTINGS_BUTTON_TEXT_ASK_BY_POLICY,
     kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
     kInvalidResourceID};
 static_assert(arraysize(kPermissionButtonTextIDPolicyManaged) ==
               CONTENT_SETTING_NUM_SETTINGS,
@@ -37,6 +43,12 @@ const int kPermissionButtonTextIDExtensionManaged[] = {
     IDS_WEBSITE_SETTINGS_BUTTON_TEXT_BLOCKED_BY_EXTENSION,
     kInvalidResourceID,
     kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
     kInvalidResourceID};
 static_assert(arraysize(kPermissionButtonTextIDExtensionManaged) ==
               CONTENT_SETTING_NUM_SETTINGS,
@@ -51,7 +63,13 @@ const int kPermissionButtonTextIDUserManaged[] = {
     IDS_WEBSITE_SETTINGS_BUTTON_TEXT_BLOCKED_BY_USER,
     IDS_WEBSITE_SETTINGS_BUTTON_TEXT_ASK_BY_USER,
     kInvalidResourceID,
-    IDS_WEBSITE_SETTINGS_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_USER};
+    IDS_WEBSITE_SETTINGS_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_USER,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID};
 static_assert(arraysize(kPermissionButtonTextIDUserManaged) ==
               CONTENT_SETTING_NUM_SETTINGS,
               "kPermissionButtonTextIDUserManaged array size is incorrect");
@@ -64,7 +82,13 @@ const int kPermissionButtonTextIDDefaultSetting[] = {
     IDS_WEBSITE_SETTINGS_BUTTON_TEXT_BLOCKED_BY_DEFAULT,
     IDS_WEBSITE_SETTINGS_BUTTON_TEXT_ASK_BY_DEFAULT,
     kInvalidResourceID,
-    IDS_WEBSITE_SETTINGS_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_DEFAULT};
+    IDS_WEBSITE_SETTINGS_BUTTON_TEXT_DETECT_IMPORTANT_CONTENT_BY_DEFAULT,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID,
+    kInvalidResourceID};
 static_assert(arraysize(kPermissionButtonTextIDDefaultSetting) ==
               CONTENT_SETTING_NUM_SETTINGS,
               "kPermissionButtonTextIDDefaultSetting array size is incorrect");
diff --git a/chrome/browser/ui/webui/options/content_settings_handler.cc b/chrome/browser/ui/webui/options/content_settings_handler.cc
index 0a78234417ec57d56618cf3978932ff459ac9f00..2104f599402da0b3c0eb25ec5b74a2310bd9be88 100644
--- a/chrome/browser/ui/webui/options/content_settings_handler.cc
+++ b/chrome/browser/ui/webui/options/content_settings_handler.cc
@@ -95,6 +95,8 @@ const char kEmbeddingOrigin[] = "embeddingOrigin";
 const char kPreferencesSource[] = "preference";
 const char kVideoSetting[] = "video";
 const char kZoom[] = "zoom";
+const char* kCategoryList[] = {"category://art-and-entertainment/books-and-literature", "category://art-and-entertainment/movies-and-tv", "category://art-and-entertainment/music", "category://art-and-entertainment/other", "category://art-and-entertainment/shows-and-events", "category://art-and-entertainment/visual-art-and-design", "category://automotive-and-vehicles/cars", "category://automotive-and-vehicles/other", "category://automotive-and-vehicles/vehicle-brands", "category://business-and-industrial/advertising-and-marketing", "category://business-and-industrial/agriculture-and-forestry", "category://business-and-industrial/business-operations", "category://business-and-industrial/energy", "category://business-and-industrial/other", "category://careers", "category://education/graduate-school", "category://education/other", "category://education/school", "category://family-and-parenting/children", "category://family-and-parenting/other", "category://finance/other", "category://finance/personal-finance", "category://food-and-drink/beverages", "category://food-and-drink/food", "category://food-and-drink/other", "category://health-and-fitness/disease", "category://health-and-fitness/disorders", "category://health-and-fitness/drugs", "category://health-and-fitness/other", "category://hobbies-and-interests/arts-and-crafts", "category://hobbies-and-interests/games", "category://hobbies-and-interests/other", "category://home-and-garden/bed-and-bath", "category://home-and-garden/home-furnishings", "category://home-and-garden/home-improvement-and-repair", "category://home-and-garden/other", "category://law-govt-and-politics/armed-forces", "category://law-govt-and-politics/government", "category://law-govt-and-politics/law-enforcement", "category://law-govt-and-politics/legal-issues", "category://law-govt-and-politics/other", "category://news", "category://pets/dogs", "category://pets/other", "category://real-estate/apartments", "category://real-estate/other", "category://religion-and-spirituality/christianity", "category://religion-and-spirituality/other", "category://science/medicine", "category://science/other", "category://science/social-science", "category://science/weather", "category://shopping/auctions", "category://shopping/gifts", "category://shopping/other", "category://shopping/resources", "category://society/crime", "category://society/dating", "category://society/other", "category://society/sex", "category://society/welfare", "category://sports/fishing", "category://sports/golf", "category://sports/other", "category://style-and-fashion/clothing", "category://style-and-fashion/jewelry", "category://style-and-fashion/other", "category://technology-and-computing/consumer-electronics", "category://technology-and-computing/hardware", "category://technology-and-computing/internet-technology", "category://technology-and-computing/other", "category://technology-and-computing/programming-languages", "category://technology-and-computing/software", "category://travel/other", "category://travel/tourist-destinations", "category://travel/tourist-facilities", "category://travel/transports", "category://travel/vacation-rentals"};
+const int kCategoryNumber = 78;
 
 const ContentSettingsTypeNameEntry kContentSettingsTypeGroupNames[] = {
   {CONTENT_SETTINGS_TYPE_COOKIES, "cookies"},
@@ -119,6 +121,8 @@ const ContentSettingsTypeNameEntry kContentSettingsTypeGroupNames[] = {
   {CONTENT_SETTINGS_TYPE_MIDI_SYSEX, "midi-sysex"},
   {CONTENT_SETTINGS_TYPE_PUSH_MESSAGING, "push-messaging"},
   {CONTENT_SETTINGS_TYPE_SSL_CERT_DECISIONS, "ssl-cert-decisions"},
+  {CONTENT_SETTINGS_TYPE_TRACKING, "tracking"},
+  {CONTENT_SETTINGS_TYPE_TRACKING_CATEGORY, "tracking-category"},
 #if defined(OS_CHROMEOS)
   {CONTENT_SETTINGS_TYPE_PROTECTED_MEDIA_IDENTIFIER, "protectedContent"},
 #endif
@@ -403,6 +407,20 @@ void ContentSettingsHandler::GetLocalizedValues(
     {"pushMessagingBlock", IDS_PUSH_MESSSAGING_BLOCK_RADIO},
     {"zoomlevelsHeader", IDS_ZOOMLEVELS_HEADER_AND_TAB_LABEL},
     {"zoomLevelsManage", IDS_ZOOMLEVELS_MANAGE_BUTTON},
+    // Tracking filter.
+    {"trackingTabLabel", IDS_TRACKING_TAB_LABEL},
+    {"trackingHeader", IDS_TRACKING_HEADER},
+    {"trackingAllow", IDS_TRACKING_ALLOW_RADIO},
+    {"trackingBlock", IDS_TRACKING_BLOCK_RADIO},
+    {"trackingCategoryHeader", IDS_TRACKING_CATEGORY_HEADER},
+    {"manageURLExceptions", IDS_TRACKING_URL_EXCEPTIONS_MANAGE},
+    {"manageCategoryExceptions", IDS_TRACKING_CATEGORY_EXCEPTIONS_MANAGE},
+    {"allowExceptionHigh", IDS_EXCEPTIONS_ALLOW_HIGH_BUTTON},
+    {"allowExceptionMedium", IDS_EXCEPTIONS_ALLOW_MEDIUM_BUTTON},
+    {"allowExceptionLow", IDS_EXCEPTIONS_ALLOW_LOW_BUTTON},
+    {"blockExceptionHigh", IDS_EXCEPTIONS_BLOCK_HIGH_BUTTON},
+    {"blockExceptionMedium", IDS_EXCEPTIONS_BLOCK_MEDIUM_BUTTON},
+    {"blockExceptionLow", IDS_EXCEPTIONS_BLOCK_LOW_BUTTON},
   };
 
   RegisterStrings(localized_strings, resources, arraysize(resources));
@@ -443,6 +461,10 @@ void ContentSettingsHandler::GetLocalizedValues(
                 IDS_MIDI_SYSEX_TAB_LABEL);
   RegisterTitle(localized_strings, "zoomlevels",
                 IDS_ZOOMLEVELS_HEADER_AND_TAB_LABEL);
+  RegisterTitle(localized_strings, "tracking",
+                IDS_TRACKING_TAB_LABEL);
+  RegisterTitle(localized_strings, "tracking-category",
+                IDS_TRACKING_TAB_LABEL);
 
   localized_strings->SetString("exceptionsLearnMoreUrl",
                                kExceptionsLearnMoreUrl);
@@ -518,6 +540,7 @@ void ContentSettingsHandler::InitializeHandler() {
     if (!observer_.IsObserving(map))
       observer_.Add(map);
   }
+  SetDefaultTrackingPreferenceCategoryExceptions();
 }
 
 void ContentSettingsHandler::InitializePage() {
@@ -1417,6 +1440,14 @@ void ContentSettingsHandler::SetContentFilter(const base::ListValue* args) {
       content::RecordAction(
           UserMetricsAction("Options_DefaultPushMessagingSettingChanged"));
       break;
+    case CONTENT_SETTINGS_TYPE_TRACKING:
+      content::RecordAction(
+          UserMetricsAction("Options_DefaultTrackingPreferenceSettingChanged"));
+      break;
+    case CONTENT_SETTINGS_TYPE_TRACKING_CATEGORY:
+      content::RecordAction(
+          UserMetricsAction("Options_DefaultTrackingPreferenceSettingChanged"));
+      break;
     default:
       break;
   }
@@ -1487,6 +1518,7 @@ void ContentSettingsHandler::CheckExceptionPatternValidity(
   std::string pattern_string;
   CHECK(args->GetString(2, &pattern_string));
 
+
   ContentSettingsPattern pattern =
       ContentSettingsPattern::FromString(pattern_string);
 
@@ -1629,4 +1661,33 @@ void ContentSettingsHandler::UpdateProtectedContentExceptionsButton() {
       base::FundamentalValue(enable_exceptions));
 }
 
+void ContentSettingsHandler::SetDefaultTrackingPreferenceCategoryExceptions() {
+  HostContentSettingsMap* settings_map = GetContentSettingsMap();
+  if (!settings_map)
+    return;
+  std::vector<std::string> category_list(kCategoryList, kCategoryList+kCategoryNumber);
+  base::ListValue exceptions;
+  GetExceptionsFromHostContentSettingsMap(
+      GetContentSettingsMap(), CONTENT_SETTINGS_TYPE_TRACKING_CATEGORY, &exceptions);
+  for (base::ListValue::iterator exception = exceptions.begin(); exception != exceptions.end(); ++exception) {
+    std::string url_pattern;
+    ((base::DictionaryValue*)(*exception))->GetString(kOrigin, &url_pattern);
+    category_list.erase(std::remove(category_list.begin(), category_list.end(), url_pattern), category_list.end());
+  }
+
+  PrefService* prefs = user_prefs::UserPrefs::Get(GetBrowserContext(web_ui()));
+  int tracking_default_mode = prefs->GetInteger(prefs::kDefaultTrackingPreferenceSetting);
+  ContentSetting setting = CONTENT_SETTING_BLOCK_MEDIUM;
+  if (tracking_default_mode == CONTENT_SETTING_ALLOW)
+    setting = CONTENT_SETTING_ALLOW_MEDIUM;
+
+  for (std::vector<std::string>::iterator i = category_list.begin(); i != category_list.end(); ++i) {
+    settings_map->SetContentSetting(ContentSettingsPattern::FromString(*i),
+                                    ContentSettingsPattern::Wildcard(),
+                                    CONTENT_SETTINGS_TYPE_TRACKING_CATEGORY,
+                                    std::string(),
+                                    setting);
+  }
+}
+
 }  // namespace options
diff --git a/chrome/browser/ui/webui/options/content_settings_handler.h b/chrome/browser/ui/webui/options/content_settings_handler.h
index 7ae81cb30b015f6d407d9b049f40a9468a8bc0fa..ec9de104b738ba4ee12633e3ad1b012aa727f3a1 100644
--- a/chrome/browser/ui/webui/options/content_settings_handler.h
+++ b/chrome/browser/ui/webui/options/content_settings_handler.h
@@ -224,6 +224,8 @@ class ContentSettingsHandler : public OptionsPageUIHandler,
 
   void UpdateProtectedContentExceptionsButton();
 
+  void SetDefaultTrackingPreferenceCategoryExceptions();
+
   // Member variables ---------------------------------------------------------
 
   content::NotificationRegistrar notification_registrar_;
diff --git a/chrome/chrome_browser_ui.gypi b/chrome/chrome_browser_ui.gypi
index 58ee9ce4a5f9084186bd4b057371cec9b4988f55..71ef2a4e72517f50219c5df58f6d713fd32abb7b 100644
--- a/chrome/chrome_browser_ui.gypi
+++ b/chrome/chrome_browser_ui.gypi
@@ -266,6 +266,8 @@
       'browser/ui/tab_modal_confirm_dialog.h',
       'browser/ui/tabs/tab_utils.cc',
       'browser/ui/tabs/tab_utils.h',
+      'browser/ui/tracking_control.cc',
+      'browser/ui/tracking_control.h',
       'browser/ui/translate/language_combobox_model.cc',
       'browser/ui/translate/language_combobox_model.h',
       'browser/ui/translate/translate_bubble_factory.cc',
@@ -1729,6 +1731,8 @@
       'browser/ui/toolbar/wrench_menu_badge_controller.h',
       'browser/ui/toolbar/wrench_menu_model.cc',
       'browser/ui/toolbar/wrench_menu_model.h',
+      'browser/ui/tracking_control.cc',
+      'browser/ui/tracking_control.h',
       'browser/ui/uma_browsing_activity_observer.cc',
       'browser/ui/uma_browsing_activity_observer.h',
       'browser/ui/unload_controller.cc',
diff --git a/chrome/test/base/test_browser_window.h b/chrome/test/base/test_browser_window.h
index 57c43fa41ddf20d85c4f415bc22f74a33f5d8c5b..16d714ad42a22bb45ac922e5e8a697bec89ac6d2 100644
--- a/chrome/test/base/test_browser_window.h
+++ b/chrome/test/base/test_browser_window.h
@@ -53,6 +53,7 @@ class TestBrowserWindow : public BrowserWindow {
                           content::WebContents* new_contents,
                           int index,
                           int reason) override {}
+  void OnProfileSwitched(bool use_offtherecord_profile) override {}
   void ZoomChangedForActiveTab(bool can_show_bubble) override {}
   gfx::Rect GetRestoredBounds() const override;
   ui::WindowShowState GetRestoredState() const override;
diff --git a/components/content_settings/core/browser/content_settings_default_provider.cc b/components/content_settings/core/browser/content_settings_default_provider.cc
index d6012f3b1e03e884fe6722354063217c64a8454e..9f00ace5973a4e72eeb54e38f87ccdf102090796 100644
--- a/components/content_settings/core/browser/content_settings_default_provider.cc
+++ b/components/content_settings/core/browser/content_settings_default_provider.cc
@@ -65,7 +65,9 @@ const DefaultContentSettingInfo kDefaultSettings[] = {
 #elif defined(OS_ANDROID) || defined(OS_CHROMEOS)
   {prefs::kDefaultProtectedMediaIdentifierSetting, CONTENT_SETTING_ASK},
 #endif
-  {prefs::kDefaultAppBannerSetting, CONTENT_SETTING_DEFAULT}
+  {prefs::kDefaultAppBannerSetting, CONTENT_SETTING_DEFAULT},
+  {prefs::kDefaultTrackingPreferenceSetting, CONTENT_SETTING_BLOCK},
+  {prefs::kDefaultTrackingPreferenceCategorySetting, CONTENT_SETTING_BLOCK},
 };
 static_assert(arraysize(kDefaultSettings) == CONTENT_SETTINGS_NUM_TYPES,
               "kDefaultSettings should have CONTENT_SETTINGS_NUM_TYPES "
diff --git a/components/content_settings/core/browser/content_settings_policy_provider.cc b/components/content_settings/core/browser/content_settings_policy_provider.cc
index 6be1a812bc1b0e1073f35fe943e89d7bc1921e5b..72540cefe8138597087dae2abbd001b8d335dd56 100644
--- a/components/content_settings/core/browser/content_settings_policy_provider.cc
+++ b/components/content_settings/core/browser/content_settings_policy_provider.cc
@@ -47,6 +47,8 @@ const char* kPrefToManageType[] = {
   NULL,  // No policy for default value of protected media identifier
 #endif
   NULL,  // No policy for default value of app banners
+  prefs::kManagedDefaultTrackingPreferenceSetting,
+  NULL,  // No policy for default value of tracking category
 };
 static_assert(arraysize(kPrefToManageType) == CONTENT_SETTINGS_NUM_TYPES,
               "kPrefToManageType should have CONTENT_SETTINGS_NUM_TYPES "
@@ -436,6 +438,8 @@ void PolicyProvider::OnPreferenceChanged(const std::string& name) {
   } else if (name == prefs::kManagedDefaultMediaStreamSetting) {
     UpdateManagedDefaultSetting(CONTENT_SETTINGS_TYPE_MEDIASTREAM_MIC);
     UpdateManagedDefaultSetting(CONTENT_SETTINGS_TYPE_MEDIASTREAM_CAMERA);
+  } else if (name == prefs::kManagedDefaultTrackingPreferenceSetting) {
+    UpdateManagedDefaultSetting(CONTENT_SETTINGS_TYPE_TRACKING);
   } else if (name == prefs::kManagedAutoSelectCertificateForUrls ||
              name == prefs::kManagedCookiesAllowedForUrls ||
              name == prefs::kManagedCookiesBlockedForUrls ||
diff --git a/components/content_settings/core/browser/content_settings_pref_provider.cc b/components/content_settings/core/browser/content_settings_pref_provider.cc
index cd8390080db3e5acc8e9c81b2f6672c09c3eba7d..4064a79bcabf089424bd93928dc1d4bb9f91bf3c 100644
--- a/components/content_settings/core/browser/content_settings_pref_provider.cc
+++ b/components/content_settings/core/browser/content_settings_pref_provider.cc
@@ -93,7 +93,9 @@ const char* kContentSettingsExceptionsPrefs[] = {
 #elif defined(OS_ANDROID) || defined(OS_CHROMEOS)
     prefs::kContentSettingsProtectedMediaIdentifierPatternPairs,
 #endif
-    prefs::kContentSettingsAppBannerPatternPairs
+    prefs::kContentSettingsAppBannerPatternPairs,
+    prefs::kContentSettingsTrackingPreferenceURLPatternPairs,
+    prefs::kContentSettingsTrackingPreferenceCategoryPatternPairs,
 };
 static_assert(arraysize(kContentSettingsExceptionsPrefs)
               == CONTENT_SETTINGS_NUM_TYPES,
diff --git a/components/content_settings/core/browser/content_settings_utils.cc b/components/content_settings/core/browser/content_settings_utils.cc
index eed02d9a011a7f0bc3ee5284b3a41831c1c1e7db..97ec6236c68929dd641e72a18e6c123e8a60e974 100644
--- a/components/content_settings/core/browser/content_settings_utils.cc
+++ b/components/content_settings/core/browser/content_settings_utils.cc
@@ -50,6 +50,8 @@ const char* kTypeNames[] = {
   "protected-media-identifier",
 #endif
   "app-banner",
+  "tracking",
+  "tracking-category",
 };
 static_assert(arraysize(kTypeNames) == CONTENT_SETTINGS_NUM_TYPES,
               "kTypeNames should have CONTENT_SETTINGS_NUM_TYPES elements");
@@ -78,6 +80,18 @@ std::string ContentSettingToString(ContentSetting setting) {
       return "detect";
     case CONTENT_SETTING_DEFAULT:
       return "default";
+    case CONTENT_SETTING_ALLOW_HIGH:
+      return "allow-high priority";
+    case CONTENT_SETTING_ALLOW_MEDIUM:
+      return "allow-medium priority";
+    case CONTENT_SETTING_ALLOW_LOW:
+      return "allow-low priority";
+    case CONTENT_SETTING_BLOCK_HIGH:
+      return "block-high priority";
+    case CONTENT_SETTING_BLOCK_MEDIUM:
+      return "block-medium priority";
+    case CONTENT_SETTING_BLOCK_LOW:
+      return "block-low priority";
     case CONTENT_SETTING_NUM_SETTINGS:
       NOTREACHED();
   }
@@ -96,6 +110,18 @@ ContentSetting ContentSettingFromString(const std::string& name) {
     return CONTENT_SETTING_SESSION_ONLY;
   if (name == "detect")
     return CONTENT_SETTING_DETECT_IMPORTANT_CONTENT;
+  if (name == "allow-high priority")
+    return CONTENT_SETTING_ALLOW_HIGH;
+  if (name == "allow-medium priority")
+    return CONTENT_SETTING_ALLOW_MEDIUM;
+  if (name == "allow-low priority")
+    return CONTENT_SETTING_ALLOW_LOW;
+  if (name == "block-high priority")
+    return CONTENT_SETTING_BLOCK_HIGH;
+  if (name == "block-medium priority")
+    return CONTENT_SETTING_BLOCK_MEDIUM;
+  if (name == "block-low priority")
+    return CONTENT_SETTING_BLOCK_LOW;
 
   NOTREACHED() << name << " is not a recognized content setting.";
   return CONTENT_SETTING_DEFAULT;
diff --git a/components/content_settings/core/common/content_settings.cc b/components/content_settings/core/common/content_settings.cc
index 91dd091ac4908d286f6b070ae27eea5a3530037f..a59217f640b0d5ea98a799dff1a9fbd48a77e0db 100644
--- a/components/content_settings/core/common/content_settings.cc
+++ b/components/content_settings/core/common/content_settings.cc
@@ -66,6 +66,10 @@ ContentSettingsTypeHistogram ContentSettingTypeToHistogramValue(
 #endif
     case CONTENT_SETTINGS_TYPE_APP_BANNER:
       return CONTENT_SETTINGS_TYPE_HISTOGRAM_APP_BANNER;
+    case CONTENT_SETTINGS_TYPE_TRACKING:
+      return CONTENT_SETTINGS_TYPE_HISTOGRAM_TRACKING;
+    case CONTENT_SETTINGS_TYPE_TRACKING_CATEGORY:
+      return CONTENT_SETTINGS_TYPE_HISTOGRAM_TRACKING_CATEGORY;
     case CONTENT_SETTINGS_NUM_TYPES:
       return CONTENT_SETTINGS_TYPE_HISTOGRAM_INVALID;
   }
@@ -90,6 +94,8 @@ bool IsContentSettingsTypeSyncable(ContentSettingsType content_setting) {
 #if defined(OS_WIN)
     case CONTENT_SETTINGS_TYPE_METRO_SWITCH_TO_DESKTOP:
 #endif
+    case CONTENT_SETTINGS_TYPE_TRACKING:
+    case CONTENT_SETTINGS_TYPE_TRACKING_CATEGORY:
       return true;
 
     case CONTENT_SETTINGS_TYPE_GEOLOCATION:
diff --git a/components/content_settings/core/common/content_settings.h b/components/content_settings/core/common/content_settings.h
index 48f16e578ace5118c7ec29a830aa10e59bb509ce..5343061333aa8d8afc1c7c9094b61c77a69a1930 100644
--- a/components/content_settings/core/common/content_settings.h
+++ b/components/content_settings/core/common/content_settings.h
@@ -22,6 +22,12 @@ enum ContentSetting {
   CONTENT_SETTING_ASK,
   CONTENT_SETTING_SESSION_ONLY,
   CONTENT_SETTING_DETECT_IMPORTANT_CONTENT,
+  CONTENT_SETTING_ALLOW_HIGH,
+  CONTENT_SETTING_ALLOW_MEDIUM,
+  CONTENT_SETTING_ALLOW_LOW,
+  CONTENT_SETTING_BLOCK_HIGH,
+  CONTENT_SETTING_BLOCK_MEDIUM,
+  CONTENT_SETTING_BLOCK_LOW,
   CONTENT_SETTING_NUM_SETTINGS
 };
 
diff --git a/components/content_settings/core/common/content_settings_pattern.cc b/components/content_settings/core/common/content_settings_pattern.cc
index b02cbee5dac6dad2f2e967507e0f079643f003ff..0e3391a231f01637d923745dea515c34205a05a2 100644
--- a/components/content_settings/core/common/content_settings_pattern.cc
+++ b/components/content_settings/core/common/content_settings_pattern.cc
@@ -279,6 +279,7 @@ bool ContentSettingsPattern::Builder::Validate(const PatternParts& parts) {
 
   // Test if the scheme is supported or a wildcard.
   if (!parts.is_scheme_wildcard &&
+      parts.scheme != "category" &&
       parts.scheme != std::string(url::kHttpScheme) &&
       parts.scheme != std::string(url::kHttpsScheme)) {
     return false;
@@ -314,6 +315,7 @@ bool ContentSettingsPattern::Builder::LegacyValidate(
 
   // Test if the scheme is supported or a wildcard.
   if (!parts.is_scheme_wildcard &&
+      parts.scheme != "category" &&
       parts.scheme != std::string(url::kHttpScheme) &&
       parts.scheme != std::string(url::kHttpsScheme)) {
     return false;
@@ -478,6 +480,9 @@ bool ContentSettingsPattern::Matches(
     return false;
   }

+  if (parts_.scheme == "category" && local_url->scheme() == "category") {
+      return (parts_.host + parts_.path) == local_url->path().substr(2);
+  }
   // File URLs have no host. Matches if the pattern has the path wildcard set,
   // or if the path in the URL is identical to the one in the pattern.
   // For filesystem:file URLs, the path used is the filesystem type, so all
@@ -562,11 +567,18 @@ ContentSettingsPattern::Relation ContentSettingsPattern::Compare(
       scheme_relation == DISJOINT_ORDER_POST)
     return scheme_relation;
 
+  Relation path_relation = ComparePath(parts_, other.parts_);
+  if (path_relation == DISJOINT_ORDER_PRE ||
+      path_relation == DISJOINT_ORDER_POST)
+    return path_relation;
+
   if (host_relation != IDENTITY)
     return host_relation;
   if (port_relation != IDENTITY)
     return port_relation;
-  return scheme_relation;
+  if (scheme_relation != IDENTITY)
+    return scheme_relation;
+  return path_relation;
 }
 
 bool ContentSettingsPattern::operator==(
@@ -709,3 +721,29 @@ ContentSettingsPattern::Relation ContentSettingsPattern::ComparePort(
     return ContentSettingsPattern::DISJOINT_ORDER_PRE;
   return ContentSettingsPattern::DISJOINT_ORDER_POST;
 }
+
+ContentSettingsPattern::Relation ContentSettingsPattern::ComparePath(
+    const ContentSettingsPattern::PatternParts& parts,
+    const ContentSettingsPattern::PatternParts& other_parts) {
+  // Path is only set (in builder methods) and checked (in |Matches()|) for
+  // file:// URLs. For all other schemes, path is completely disregarded,
+  // and thus the result of this comparison is identity.
+  if ((parts.scheme != url::kFileScheme ||
+      other_parts.scheme != url::kFileScheme) &&
+      (parts.scheme != "category" ||
+      other_parts.scheme != "category")) {
+    return ContentSettingsPattern::IDENTITY;
+  }
+
+  if (parts.is_path_wildcard && !other_parts.is_path_wildcard)
+    return ContentSettingsPattern::SUCCESSOR;
+  if (!parts.is_path_wildcard && other_parts.is_path_wildcard)
+    return ContentSettingsPattern::PREDECESSOR;
+
+  int result = parts.path.compare(other_parts.path);
+  if (result == 0)
+    return ContentSettingsPattern::IDENTITY;
+  if (result > 0)
+    return ContentSettingsPattern::DISJOINT_ORDER_PRE;
+  return ContentSettingsPattern::DISJOINT_ORDER_POST;
+}
diff --git a/components/content_settings/core/common/content_settings_pattern.h b/components/content_settings/core/common/content_settings_pattern.h
index 70b17a501a87f2ed021fee62e5520f9e0c2cd860..735012c757a064447551e335238f0d2b2fee8f46 100644
--- a/components/content_settings/core/common/content_settings_pattern.h
+++ b/components/content_settings/core/common/content_settings_pattern.h
@@ -204,6 +204,10 @@ class ContentSettingsPattern {
       const ContentSettingsPattern::PatternParts& parts,
       const ContentSettingsPattern::PatternParts& other_parts);
 
+  static Relation ComparePath(
+      const ContentSettingsPattern::PatternParts& parts,
+      const ContentSettingsPattern::PatternParts& other_parts);
+
   ContentSettingsPattern(const PatternParts& parts, bool valid);
 
   PatternParts parts_;
diff --git a/components/content_settings/core/common/content_settings_pattern_parser.cc b/components/content_settings/core/common/content_settings_pattern_parser.cc
index 8494bfd4944f2216bd11527db49475a70512c61b..11817f28d0a505c3083204134a9121df6a99f134 100644
--- a/components/content_settings/core/common/content_settings_pattern_parser.cc
+++ b/components/content_settings/core/common/content_settings_pattern_parser.cc
@@ -206,6 +206,11 @@ std::string PatternParser::ToString(
   }
   str += parts.host;
 
+  if (parts.scheme == "category" && !parts.path.empty()) {
+    str += parts.path;
+    return str;
+  }
+
   if (ContentSettingsPattern::IsNonWildcardDomainNonPortScheme(parts.scheme)) {
     str += parts.path.empty() ? std::string(kUrlPathSeparator) : parts.path;
     return str;
diff --git a/components/content_settings/core/common/content_settings_types.h b/components/content_settings/core/common/content_settings_types.h
index b1cf04c609e35a10c24fdf31eafc33694ecb7ecf..86f05e04442147c13a85bce66c74c64e52fbb7f7 100644
--- a/components/content_settings/core/common/content_settings_types.h
+++ b/components/content_settings/core/common/content_settings_types.h
@@ -47,6 +47,8 @@ enum ContentSettingsType {
   CONTENT_SETTINGS_TYPE_PROTECTED_MEDIA_IDENTIFIER,
 #endif
   CONTENT_SETTINGS_TYPE_APP_BANNER,
+  CONTENT_SETTINGS_TYPE_TRACKING,
+  CONTENT_SETTINGS_TYPE_TRACKING_CATEGORY,
   CONTENT_SETTINGS_NUM_TYPES,
 };
 
@@ -79,6 +81,8 @@ enum ContentSettingsTypeHistogram {
   CONTENT_SETTINGS_TYPE_HISTOGRAM_METRO_SWITCH_TO_DESKTOP,
   CONTENT_SETTINGS_TYPE_HISTOGRAM_PROTECTED_MEDIA_IDENTIFIER,
   CONTENT_SETTINGS_TYPE_HISTOGRAM_APP_BANNER,
+  CONTENT_SETTINGS_TYPE_HISTOGRAM_TRACKING,
+  CONTENT_SETTINGS_TYPE_HISTOGRAM_TRACKING_CATEGORY,
   CONTENT_SETTINGS_HISTOGRAM_NUM_TYPES,
 };
 
diff --git a/components/content_settings/core/common/pref_names.cc b/components/content_settings/core/common/pref_names.cc
index bffdc49e8601e7ae11dbf9cb14e757da2c57d886..652adbba4c7b4448e59e258a5733b83d57df484b 100644
--- a/components/content_settings/core/common/pref_names.cc
+++ b/components/content_settings/core/common/pref_names.cc
@@ -197,4 +197,21 @@ const char kManagedNotificationsBlockedForUrls[] =
 const char kManagedAutoSelectCertificateForUrls[] =
     "profile.managed_auto_select_certificate_for_urls";
 
+// *************** USER TRACKING PREFS ***************
+// Third-party tracking prefs.
+
+// An integer property indicating the fallback (default) browsing mode.
+// 1: "normal": use normal profile by default
+// 2: "anonymous": use incognito profile by default
+const char kDefaultTrackingPreferenceSetting[] = "profile.default_content_setting_values.tracking";
+
+const char kManagedDefaultTrackingPreferenceSetting[] = "profile.managed_default_content_settings.tracking";
+
+const char kContentSettingsTrackingPreferenceURLPatternPairs[] =
+    "profile.content_settings.exceptions.tracking";
+
+const char kDefaultTrackingPreferenceCategorySetting[] = "profile.default_content_setting_values.tracking_category";
+
+const char kContentSettingsTrackingPreferenceCategoryPatternPairs[] =
+    "profile.content_settings.exceptions.tracking_category";
 }  // namespace prefs
diff --git a/components/content_settings/core/common/pref_names.h b/components/content_settings/core/common/pref_names.h
index 69591d577a889ad92cff94c0341db452ddaab66c..c93ce0db94c2b9d28db0810017bcbf985fbbcbbe 100644
--- a/components/content_settings/core/common/pref_names.h
+++ b/components/content_settings/core/common/pref_names.h
@@ -99,6 +99,13 @@ extern const char kManagedNotificationsAllowedForUrls[];
 extern const char kManagedNotificationsBlockedForUrls[];
 extern const char kManagedAutoSelectCertificateForUrls[];
 
+// Third-party tracking prefs.
+extern const char kDefaultTrackingPreferenceSetting[];
+extern const char kManagedDefaultTrackingPreferenceSetting[];
+extern const char kContentSettingsTrackingPreferenceURLPatternPairs[];
+extern const char kDefaultTrackingPreferenceCategorySetting[];
+extern const char kContentSettingsTrackingPreferenceCategoryPatternPairs[];
+
 }  // namespace prefs
 
 #endif  // COMPONENTS_CONTENT_SETTINGS_CORE_COMMON_PREF_NAMES_H_
diff --git a/components/policy/resources/policy_templates.json b/components/policy/resources/policy_templates.json
index cc26e75ca6777ad4a8cd073985c35a800855f6ec..15c911db6ed83a08bbe163a6c9d0d859228f9eb7 100644
--- a/components/policy/resources/policy_templates.json
+++ b/components/policy/resources/policy_templates.json
@@ -123,7 +123,7 @@
 #   persistent IDs for all fields (but not for groups!) are needed. These are
 #   specified by the 'id' keys of each policy. NEVER CHANGE EXISTING IDs,
 #   because doing so would break the deployed wire format!
-#   For your editing convenience: highest ID currently used: 301
+#   For your editing convenience: highest ID currently used: 302
 #
 # Placeholders:
 #   The following placeholder strings are automatically substituted:
@@ -3138,6 +3138,69 @@
 
           If this policy is left not set the global default value will be used for all sites either from the 'DefaultNotificationsSetting' policy if it is set, or the user's personal configuration otherwise.''',
         },
+        {
+          'name': 'DefaultTrackingPreferenceSetting',
+          'type': 'int-enum',
+          'schema': {
+            'type': 'integer',
+            'enum': [ 1, 2, 6, 7, 8, 9, 10, 11],
+          },
+          'items': [
+            {
+              'name': 'AllowTracking',
+              'value': 1,
+              'caption': '''Use the normal (persistent) profile as the fallback (default) browsing profile''',
+            },
+            {
+              'name': 'BlockTracking',
+              'value': 2,
+              'caption': '''Use an anonymous (temporary) profile as the fallback (default) browsing profile''',
+            },
+            {
+              'name': 'AllowTracking-High',
+              'value': 6,
+              'caption': '''Use the normal (persistent) profile as the fallback (default) browsing profile with high priority''',
+            },
+            {
+              'name': 'AllowTracking-Medium',
+              'value': 7,
+              'caption': '''Use the normal (persistent) profile as the fallback (default) browsing profile with medium priority''',
+            },
+            {
+              'name': 'AllowTracking-Low',
+              'value': 8,
+              'caption': '''Use the normal (persistent) profile as the fallback (default) browsing profile with low priority''',
+            },
+            {
+              'name': 'BlockTracking-High',
+              'value': 9,
+              'caption': '''Use an anonymous (temporary) profile as the fallback (default) browsing profile with high priority''',
+            },
+            {
+              'name': 'BlockTracking-Medium',
+              'value': 10,
+              'caption': '''Use an anonymous (temporary) profile as the fallback (default) browsing profile with medium priority''',
+            },
+            {
+              'name': 'BlockTracking-Low',
+              'value': 11,
+              'caption': '''Use an anonymous (temporary) profile as the fallback (default) browsing profile with low priority''',
+            },
+          ],
+          'supported_on': [
+            'chrome.*:45-',
+          ],
+          'features': {
+            'dynamic_refresh': True,
+            'per_profile': True,
+          },
+          'example_value': 2,
+          'id': 302,
+          'caption': '''Default tracking preference setting''',
+          'desc': '''Allows you to set whether Chrome uses an anonymous (temporary) profile or a persistent (normal) profile as the default profile to browse web pages.
+
+          If this policy is left not set, 'BlockTracking' will be used and the user will be able to change it.''',
+        },
       ],
     },
     {
diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index 3cb44c6dd55f200789a37666adeb7b361facfc11..dc2720cf34353053e41bdf746b582aa20b3b8959 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -21,6 +21,7 @@
 #include "base/thread_task_runner_handle.h"
 #include "base/time/time.h"
 #include "base/trace_event/trace_event.h"
+#include "base/trace_event/tracking_control_trace.h"
 #include "components/mime_util/mime_util.h"
 #include "content/browser/accessibility/accessibility_mode_helper.h"
 #include "content/browser/accessibility/browser_accessibility_state_impl.h"
@@ -524,6 +525,7 @@ bool WebContentsImpl::OnMessageReceived(RenderViewHost* render_view_host,
     IPC_MESSAGE_HANDLER(FrameHostMsg_DidFinishDocumentLoad,
                         OnDocumentLoadedInFrame)
     IPC_MESSAGE_HANDLER(FrameHostMsg_DidFinishLoad, OnDidFinishLoad)
+    IPC_MESSAGE_HANDLER(FrameHostMsg_DidFinishClassification, OnDidFinishClassification)
     IPC_MESSAGE_HANDLER(FrameHostMsg_OpenColorChooser, OnOpenColorChooser)
     IPC_MESSAGE_HANDLER(FrameHostMsg_EndColorChooser, OnEndColorChooser)
     IPC_MESSAGE_HANDLER(FrameHostMsg_SetSelectedColorInColorChooser,
@@ -800,6 +802,16 @@ const std::string& WebContentsImpl::GetUserAgentOverride() const {
   return renderer_preferences_.user_agent_override;
 }
 
+void WebContentsImpl::SetCheckUserTrackingPreference(bool check) {
+  /*LOG(ERROR) << "(WebContentsImpl) SetCheckUserTrackingPreference: "*/
+      /*<< check << "\n";*/
+  renderer_preferences_.check_user_tracking_preference = check;
+  RenderViewHost* host = GetRenderViewHost();
+  if (host) {
+    host->SyncRendererPrefs();
+  }
+}
+
 void WebContentsImpl::EnableTreeOnlyAccessibilityMode() {
   AddAccessibilityMode(AccessibilityModeTreeOnly);
 }
@@ -2882,6 +2894,41 @@ void WebContentsImpl::OnDocumentLoadedInFrame() {
       WebContentsObserver, observers_, DocumentLoadedInFrame(rfh));
 }
 
+void WebContentsImpl::OnDidFinishClassification(const GURL& url, const std::string& result) {
+  /*TMON_TRACE("WebContentsImpl::OnDidFinishClassification");*/
+  /*TMON_TRACE_FLUSH();*/
+  bool is_offtherecord = GetBrowserContext()->IsOffTheRecord();
+  bool use_offtherecord = delegate_->ShouldUseOffTheRecord(url, result);
+  bool need_profile_switch = false;
+  // LOG(ERROR) << "WebContentsImpl::OnDidFinishClassification() : "
+  //   << url << " result: " << result;
+  // LOG(ERROR) << "WebContentsImpl::OnDidFinishClassification() : useOffTheRecord: "
+  //   << use_offtherecord << ", isOffTheRecord: " << is_offtherecord << "\n";
+  if (is_offtherecord && !use_offtherecord) {
+    // LOG(ERROR) << "(WebContentsImpl) Switch to normal profile\n";
+    delegate_->SwitchProfileWithNewWebContents(this, false);
+    need_profile_switch = true;
+  }
+  if (!is_offtherecord && use_offtherecord) {
+    // LOG(ERROR) << "(WebContentsImpl) Switch to offtherecord profile\n";
+    delegate_->SwitchProfileWithNewWebContents(this, true);
+    need_profile_switch = true;
+  }
+
+  if (!need_profile_switch) {
+    // wake up the preloading!
+    RenderFrameHost* main_frame = GetMainFrame();
+    if (!main_frame)
+      return;
+    // LOG(ERROR) << "(WebContentsImpl) send FrameMsg_DidCheckUserTrackingPreference\n";
+
+    /*TMON_TRACE("WebContentsImpl::OnDidFinishClassification (IPC)");*/
+    /*TMON_TRACE_FLUSH();*/
+    main_frame->Send(new FrameMsg_DidCheckUserTrackingPreference(
+      main_frame->GetRoutingID()));
+  }
+}
+
 void WebContentsImpl::OnDidFinishLoad(const GURL& url) {
   if (!HasValidFrameSource())
     return;
diff --git a/content/browser/web_contents/web_contents_impl.h b/content/browser/web_contents/web_contents_impl.h
index bffa888df9ff1d3da747d2bdef9ff9017f8c13e1..2d3a874e54671e006dddba33f213322d92ac08b2 100644
--- a/content/browser/web_contents/web_contents_impl.h
+++ b/content/browser/web_contents/web_contents_impl.h
@@ -245,6 +245,7 @@ class CONTENT_EXPORT WebContentsImpl
   WebUI* GetCommittedWebUI() const override;
   void SetUserAgentOverride(const std::string& override) override;
   const std::string& GetUserAgentOverride() const override;
+  void SetCheckUserTrackingPreference(bool check) override;
   void EnableTreeOnlyAccessibilityMode() override;
   bool IsTreeOnlyAccessibilityModeForTesting() const override;
   bool IsFullAccessibilityModeForTesting() const override;
@@ -785,6 +786,7 @@ class CONTENT_EXPORT WebContentsImpl
                                const GURL& target_url);
   void OnDocumentLoadedInFrame();
   void OnDidFinishLoad(const GURL& url);
+  void OnDidFinishClassification(const GURL& url, const std::string& result);
   void OnGoToEntryAtOffset(int offset);
   void OnUpdateZoomLimits(int minimum_percent,
                           int maximum_percent);
diff --git a/content/common/frame_messages.h b/content/common/frame_messages.h
index 1bf18dfa253277a1114f4b287beaeb09509c4b15..b2c7899965c6d5eaf127a7b1b487172c2d7e0822 100644
--- a/content/common/frame_messages.h
+++ b/content/common/frame_messages.h
@@ -556,6 +556,8 @@ IPC_MESSAGE_ROUTED1(FrameMsg_ShowTransitionElements,
 IPC_MESSAGE_ROUTED1(FrameMsg_Reload,
                     bool /* ignore_cache */)
 
+IPC_MESSAGE_ROUTED0(FrameMsg_DidCheckUserTrackingPreference)
+
 // Notifies the color chooser client that the user selected a color.
 IPC_MESSAGE_ROUTED2(FrameMsg_DidChooseColorResponse, unsigned, SkColor)
 
@@ -724,6 +726,10 @@ IPC_MESSAGE_ROUTED1(FrameHostMsg_OpenURL, FrameHostMsg_OpenURL_Params)
 IPC_MESSAGE_ROUTED1(FrameHostMsg_DidFinishLoad,
                     GURL /* validated_url */)
 
+IPC_MESSAGE_ROUTED2(FrameHostMsg_DidFinishClassification,
+                    GURL, /* validated_url */
+                    std::string /* Tab delimited classification results */)
+
 // Sent when after the onload handler has been invoked for the document
 // in this frame. Sent for top-level frames. |report_type| and |ui_timestamp|
 // are used to report navigation metrics starting on the ui input event that
diff --git a/content/common/view_messages.h b/content/common/view_messages.h
index ee3606ceca70315538a5974e15f8814b498c04b5..bcb4a05774357530d267c084288b42f4f3d0908d 100644
--- a/content/common/view_messages.h
+++ b/content/common/view_messages.h
@@ -246,6 +246,7 @@ IPC_STRUCT_TRAITS_BEGIN(content::RendererPreferences)
   IPC_STRUCT_TRAITS_MEMBER(active_selection_fg_color)
   IPC_STRUCT_TRAITS_MEMBER(inactive_selection_bg_color)
   IPC_STRUCT_TRAITS_MEMBER(inactive_selection_fg_color)
+  IPC_STRUCT_TRAITS_MEMBER(check_user_tracking_preference)
   IPC_STRUCT_TRAITS_MEMBER(browser_handles_non_local_top_level_requests)
   IPC_STRUCT_TRAITS_MEMBER(browser_handles_all_top_level_requests)
   IPC_STRUCT_TRAITS_MEMBER(caret_blink_interval)
diff --git a/content/public/browser/browser_context.h b/content/public/browser/browser_context.h
index c15afefc81a7f91e864ffd94164d41881011c2c6..c433349f594a437a3a440ce42354915c59453577 100644
--- a/content/public/browser/browser_context.h
+++ b/content/public/browser/browser_context.h
@@ -133,6 +133,9 @@ class CONTENT_EXPORT BrowserContext : public base::SupportsUserData {
   // Return whether this context is incognito. Default is false.
   virtual bool IsOffTheRecord() const = 0;
 
+  // Create new incongino context.
+  virtual BrowserContext* GetOffTheRecordBrowserContext() = 0;
+
   // Returns the request context information associated with this context.  Call
   // this only on the UI thread, since it can send notifications that should
   // happen on the UI thread.
diff --git a/content/public/browser/page_navigator.cc b/content/public/browser/page_navigator.cc
index c919ee2d8ca0b5105497c83f003a0435f17fa5bc..24a6b6bb648ed9ce5a984f3843e0dc196a1a4d0d 100644
--- a/content/public/browser/page_navigator.cc
+++ b/content/public/browser/page_navigator.cc
@@ -20,6 +20,8 @@ OpenURLParams::OpenURLParams(
       transition(transition),
       is_renderer_initiated(is_renderer_initiated),
       should_replace_current_entry(false),
+      use_offtherecord_profile(true),
+      check_user_tracking_preference(true),
       user_gesture(!is_renderer_initiated) {
 }
 
@@ -38,6 +40,8 @@ OpenURLParams::OpenURLParams(
       transition(transition),
       is_renderer_initiated(is_renderer_initiated),
       should_replace_current_entry(false),
+      use_offtherecord_profile(true),
+      check_user_tracking_preference(true),
       user_gesture(!is_renderer_initiated) {
 }
 
@@ -48,6 +52,8 @@ OpenURLParams::OpenURLParams()
       transition(ui::PAGE_TRANSITION_LINK),
       is_renderer_initiated(false),
       should_replace_current_entry(false),
+      use_offtherecord_profile(true),
+      check_user_tracking_preference(true),
       user_gesture(true) {
 }
 
diff --git a/content/public/browser/page_navigator.h b/content/public/browser/page_navigator.h
index 912cab83ea62ee7f7503458bf1399bf0b4830029..7960f3ead2d036a2c299c0c447790d543d03fc72 100644
--- a/content/public/browser/page_navigator.h
+++ b/content/public/browser/page_navigator.h
@@ -84,6 +84,13 @@ struct CONTENT_EXPORT OpenURLParams {
   // navigation entry.
   bool should_replace_current_entry;
 
+  // Indicates whether this navigation should use OffTheRecord profile.
+  bool use_offtherecord_profile;
+
+  // Indicates whether the WebContents needs to check user tracking
+  // preference with the browser process.
+  bool check_user_tracking_preference;
+
   // Indicates whether this navigation was triggered while processing a user
   // gesture if the navigation was initiated by the renderer.
   bool user_gesture;
diff --git a/content/public/browser/web_contents.h b/content/public/browser/web_contents.h
index 768ece2fc51ef52b0cbccf9d55f9e78944e40084..fd38b6c1c9860e2dd699e1df8490116c3330d03f 100644
--- a/content/public/browser/web_contents.h
+++ b/content/public/browser/web_contents.h
@@ -257,6 +257,10 @@ class WebContents : public PageNavigator,
   virtual void SetUserAgentOverride(const std::string& override) = 0;
   virtual const std::string& GetUserAgentOverride() const = 0;
 
+  // Determines whether the renderer should check user tracking preference with
+  // browser
+  virtual void SetCheckUserTrackingPreference(bool check) = 0;
+
   // Enable the accessibility tree for this WebContents in the renderer,
   // but don't enable creating a native accessibility tree on the browser
   // side.
diff --git a/content/public/browser/web_contents_delegate.cc b/content/public/browser/web_contents_delegate.cc
index b1fc250aa40cbc0c9f165171a51ad8169d50a0e7..b4ea0981c4c4ff30d1bd6f2b26d9c6e81a3391a0 100644
--- a/content/public/browser/web_contents_delegate.cc
+++ b/content/public/browser/web_contents_delegate.cc
@@ -23,6 +23,26 @@ WebContents* WebContentsDelegate::OpenURLFromTab(WebContents* source,
   return nullptr;
 }
 
+void WebContentsDelegate::SwitchProfileWithNewWebContents(WebContents* source,
+                                                          bool use_offtherecord) {
+  //LOG(ERROR) << "WebContentsDelegate::SwitchProfileWithNewWebContents()\n";
+}
+
+bool WebContentsDelegate::ShouldUseOffTheRecord(const GURL& url, const std::string& result) {
+  //LOG(ERROR) << "WebContentsDelegate::ShouldUseOffTheRecord() " << url << "\n";
+  if (!url.has_scheme() || url.SchemeIs("chrome-extension") || url.SchemeIs("chrome-devtools"))
+    return false;
+  if (url.SchemeIs("chrome-search"))
+    return true;
+  if (url.SchemeIs("chrome")) {
+    if (url == GURL("chrome://newtab/"))
+      return true;
+    else
+      return false;
+  }
+  return true;
+}
+
 bool WebContentsDelegate::IsPopupOrPanel(const WebContents* source) const {
   return false;
 }
diff --git a/content/public/browser/web_contents_delegate.h b/content/public/browser/web_contents_delegate.h
index 66439dfccb72266609ee0ecbcf25162694b10973..9500aa8fd2a5cd3a618c2f99736a3b65ecb7ed32 100644
--- a/content/public/browser/web_contents_delegate.h
+++ b/content/public/browser/web_contents_delegate.h
@@ -81,6 +81,13 @@ class CONTENT_EXPORT WebContentsDelegate {
   virtual WebContents* OpenURLFromTab(WebContents* source,
                                       const OpenURLParams& params);
 
+  // Reinitiate navigation using a new WebContents of a different profile.
+  virtual void SwitchProfileWithNewWebContents(WebContents* source, bool use_offtherecord);
+
+  // Called to decide whether the navigation should use OffTheRecord profile
+  // based on url and classification result from renderer.
+  virtual bool ShouldUseOffTheRecord(const GURL& url, const std::string& result);
+
   // Called to inform the delegate that the WebContents's navigation state
   // changed. The |changed_flags| indicates the parts of the navigation state
   // that have been updated.
diff --git a/content/public/common/renderer_preferences.cc b/content/public/common/renderer_preferences.cc
index e8af8b5dd114032bf8ee8c035e88e2e801b0ee4f..871ea663f05380f3955a35714cc88e8f421fff67 100644
--- a/content/public/common/renderer_preferences.cc
+++ b/content/public/common/renderer_preferences.cc
@@ -25,6 +25,7 @@ RendererPreferences::RendererPreferences()
       active_selection_fg_color(SK_ColorWHITE),
       inactive_selection_bg_color(SkColorSetRGB(200, 200, 200)),
       inactive_selection_fg_color(SkColorSetRGB(50, 50, 50)),
+      check_user_tracking_preference(true),
       browser_handles_non_local_top_level_requests(false),
       browser_handles_all_top_level_requests(false),
       caret_blink_interval(0.5),
diff --git a/content/public/common/renderer_preferences.h b/content/public/common/renderer_preferences.h
index 13dd30fb3b924db6387fdfad7021c98a13bf9cd8..b5b68721c8731ee992a4e241c6713892a270a51a 100644
--- a/content/public/common/renderer_preferences.h
+++ b/content/public/common/renderer_preferences.h
@@ -76,6 +76,9 @@ struct CONTENT_EXPORT RendererPreferences {
   SkColor inactive_selection_bg_color;
   SkColor inactive_selection_fg_color;
 
+  // Whether renderer should check user tracking preference with browser.
+  bool check_user_tracking_preference;
+
   // Browser wants a look at all non-local top level navigation requests.
   bool browser_handles_non_local_top_level_requests;
 
diff --git a/content/public/test/test_browser_context.cc b/content/public/test/test_browser_context.cc
index 107dbb25f1482e7a52bc22c107cf1e1d05e0e05b..f1ff3ecc071b36e810446e93a86ad459e45edc43 100644
--- a/content/public/test/test_browser_context.cc
+++ b/content/public/test/test_browser_context.cc
@@ -68,6 +68,10 @@ bool TestBrowserContext::IsOffTheRecord() const {
   return false;
 }
 
+BrowserContext* TestBrowserContext::GetOffTheRecordBrowserContext() {
+  return NULL;
+}
+
 DownloadManagerDelegate* TestBrowserContext::GetDownloadManagerDelegate() {
   return NULL;
 }
diff --git a/content/public/test/test_browser_context.h b/content/public/test/test_browser_context.h
index 2e6d166c798236753e6144b21c659fe49b7be16f..637d3ee9dc090cfebb785b88b05597a640578e78 100644
--- a/content/public/test/test_browser_context.h
+++ b/content/public/test/test_browser_context.h
@@ -32,6 +32,7 @@ class TestBrowserContext : public BrowserContext {
   scoped_ptr<ZoomLevelDelegate> CreateZoomLevelDelegate(
       const base::FilePath& partition_path) override;
   bool IsOffTheRecord() const override;
+  BrowserContext* GetOffTheRecordBrowserContext() override;
   DownloadManagerDelegate* GetDownloadManagerDelegate() override;
   net::URLRequestContextGetter* GetRequestContext() override;
   net::URLRequestContextGetter* GetRequestContextForRenderProcess(
diff --git a/content/renderer/render_frame_impl.cc b/content/renderer/render_frame_impl.cc
index aba81eeed17575e01094143cc0d6e1313b0575a4..2b4f9d8ed0a38ccae49c89f3ab1c7d9ab4043b62 100644
--- a/content/renderer/render_frame_impl.cc
+++ b/content/renderer/render_frame_impl.cc
@@ -8,6 +8,7 @@
 #include <string>
 
 #include "base/auto_reset.h"
+#include "base/trace_event/tracking_control_trace.h"
 #include "base/command_line.h"
 #include "base/debug/alias.h"
 #include "base/debug/asan_invalid_access.h"
@@ -148,6 +149,8 @@
 #include "third_party/mojo/src/mojo/edk/js/core.h"
 #include "third_party/mojo/src/mojo/edk/js/support.h"
 
+#include "base/logging.h"
+
 #if defined(ENABLE_PLUGINS)
 #include "content/renderer/npapi/webplugin_impl.h"
 #include "content/renderer/pepper/pepper_browser_connection.h"
@@ -619,6 +622,7 @@ RenderFrameImpl::RenderFrameImpl(RenderViewImpl* render_view, int routing_id)
       render_view_(render_view->AsWeakPtr()),
       routing_id_(routing_id),
       is_swapped_out_(false),
+      should_check_user_tracking_preference(true),
       render_frame_proxy_(NULL),
       is_detaching_(false),
       proxy_routing_id_(MSG_ROUTING_NONE),
@@ -1019,6 +1023,7 @@ bool RenderFrameImpl::OnMessageReceived(const IPC::Message& msg) {
     IPC_MESSAGE_HANDLER(FrameMsg_SetEditableSelectionOffsets,
                         OnSetEditableSelectionOffsets)
     IPC_MESSAGE_HANDLER(FrameMsg_Reload, OnReload)
+    IPC_MESSAGE_HANDLER(FrameMsg_DidCheckUserTrackingPreference, OnDidCheckUserTrackingPreference)
     IPC_MESSAGE_HANDLER(FrameMsg_TextSurroundingSelectionRequest,
                         OnTextSurroundingSelectionRequest)
     IPC_MESSAGE_HANDLER(FrameMsg_SetAccessibilityMode,
@@ -1685,6 +1690,12 @@ void RenderFrameImpl::OnReload(bool ignore_cache) {
   frame_->reload(ignore_cache);
 }
 
+void RenderFrameImpl::OnDidCheckUserTrackingPreference() {
+  /*TMON_TRACE("RenderFrameImpl::OnDidCheckUserTrackingPreference");*/
+  /*TMON_TRACE_FLUSH();*/
+  frame_->didCheckUserTrackingPreference();
+}
+
 void RenderFrameImpl::OnTextSurroundingSelectionRequest(size_t max_length) {
   blink::WebSurroundingText surroundingText;
   surroundingText.initialize(frame_->selectionRange(), max_length);
@@ -2852,16 +2863,41 @@ void RenderFrameImpl::didFailLoad(blink::WebLocalFrame* frame,
                                              error_description));
 }
 
+void RenderFrameImpl::didFinishClassification(blink::WebLocalFrame* frame, const blink::WebString& result) {
+  WebDataSource* ds = frame->dataSource();
+  TRACE_EVENT1("navigation", "RenderFrameImpl::didFinishClassification",
+               "id", routing_id_);
+  /*TMON_TRACE("RenderFrameImpl::didFinishClassification");*/
+  /*TMON_TRACE_FLUSH();*/
+  Send(new FrameHostMsg_DidFinishClassification(routing_id_, ds->request().url(), result.utf8()));
+}
+
+bool RenderFrameImpl::shouldCheckUserTrackingPreference() {
+//  LOG(ERROR) << "RenderFrameImpl::shouldCheckUserTrackingPreference: "
+//    << should_check_user_tracking_preference << "\n";
+  return should_check_user_tracking_preference;
+}
+
+void RenderFrameImpl::setCheckUserTrackingPreference(bool check) {
+//  LOG(ERROR) << "RenderFrameImpl::setCheckUserTrackingPreference: " << check << "\n";
+  should_check_user_tracking_preference = check;
+}
+
 void RenderFrameImpl::didFinishLoad(blink::WebLocalFrame* frame) {
   TRACE_EVENT1("navigation", "RenderFrameImpl::didFinishLoad",
                "id", routing_id_);
   DCHECK(!frame_ || frame_ == frame);
   WebDataSource* ds = frame->dataSource();
   DocumentState* document_state = DocumentState::FromDataSource(ds);
+  /*TMON_TRACE(std::string("RenderFrameImpl::didFinishLoad@") + ds->request().url().string().latin1().data());*/
+  /*TMON_TRACE_FLUSH();*/
+
   if (document_state->finish_load_time().is_null()) {
     if (!frame->parent()) {
       TRACE_EVENT_INSTANT0("WebCore", "LoadFinished",
                            TRACE_EVENT_SCOPE_PROCESS);
+      /*TMON_TRACE(std::string("RenderFrameImpl::MainFrameLoadFinished@") + ds->request().url().string().latin1().data());*/
+      /*TMON_TRACE_FLUSH();*/
     }
     document_state->set_finish_load_time(Time::Now());
   }
diff --git a/content/renderer/render_frame_impl.h b/content/renderer/render_frame_impl.h
index ecb243cd734542154069bc98523e9af8ccdfb689..a8103bdeaf952e42be0bb9b5f4ad316a0df427ad 100644
--- a/content/renderer/render_frame_impl.h
+++ b/content/renderer/render_frame_impl.h
@@ -428,6 +428,9 @@ class CONTENT_EXPORT RenderFrameImpl
   virtual void didFailLoad(blink::WebLocalFrame* frame,
                            const blink::WebURLError& error,
                            blink::WebHistoryCommitType commit_type);
+  virtual void didFinishClassification(blink::WebLocalFrame* frame, const blink::WebString& result);
+  virtual bool shouldCheckUserTrackingPreference();
+  virtual void setCheckUserTrackingPreference(bool check);
   virtual void didFinishLoad(blink::WebLocalFrame* frame);
   virtual void didNavigateWithinPage(blink::WebLocalFrame* frame,
                                      const blink::WebHistoryItem& item,
@@ -654,6 +657,7 @@ class CONTENT_EXPORT RenderFrameImpl
   void OnExecuteNoValueEditCommand(const std::string& name);
   void OnExtendSelectionAndDelete(int before, int after);
   void OnReload(bool ignore_cache);
+  void OnDidCheckUserTrackingPreference();
   void OnTextSurroundingSelectionRequest(size_t max_length);
   void OnSetAccessibilityMode(AccessibilityMode new_mode);
   void OnSnapshotAccessibilityTree(int callback_id);
@@ -823,6 +827,8 @@ class CONTENT_EXPORT RenderFrameImpl
   int routing_id_;
   bool is_swapped_out_;
 
+  bool should_check_user_tracking_preference;
+
   // RenderFrameProxy exists only when is_swapped_out_ is true.
   // TODO(nasko): This can be removed once we don't have a swapped out state on
   // RenderFrame. See https://crbug.com/357747.
diff --git a/content/renderer/render_view_impl.cc b/content/renderer/render_view_impl.cc
index 1c4f80986a415dd37d513d931e8b88a2641d3019..f0018d4fa23699296711e9738315e1840c4203c5 100644
--- a/content/renderer/render_view_impl.cc
+++ b/content/renderer/render_view_impl.cc
@@ -178,6 +178,8 @@
 #include "ui/gfx/native_widget_types.h"
 #include "v8/include/v8.h"
 
+#include "base/logging.h"
+
 #if defined(OS_ANDROID)
 #include <cpu-features.h>
 
@@ -2765,6 +2767,12 @@ void RenderViewImpl::OnSetRendererPrefs(
       old_accept_languages != renderer_preferences_.accept_languages) {
     webview()->acceptLanguagesChanged();
   }
+
+  if (webview() && webview()->mainFrame()->isWebLocalFrame()) {
+    bool check = renderer_preferences_.check_user_tracking_preference;
+//    LOG(ERROR) << "RenderViewImpl::OnSetRendererPrefs(): " << check << "\n";
+    GetMainRenderFrame()->setCheckUserTrackingPreference(check);
+  }
 }
 
 void RenderViewImpl::OnMediaPlayerActionAt(const gfx::Point& location,
diff --git a/content/shell/browser/shell_browser_context.cc b/content/shell/browser/shell_browser_context.cc
index b81ae1c6b1537ff35c794338679faa5ac6e81f05..755e18168874d7d5d221f2f950b711684dc07251 100644
--- a/content/shell/browser/shell_browser_context.cc
+++ b/content/shell/browser/shell_browser_context.cc
@@ -109,6 +109,10 @@ bool ShellBrowserContext::IsOffTheRecord() const {
   return off_the_record_;
 }
 
+BrowserContext* ShellBrowserContext::GetOffTheRecordBrowserContext() {
+  return NULL;
+}
+
 DownloadManagerDelegate* ShellBrowserContext::GetDownloadManagerDelegate()  {
   if (!download_manager_delegate_.get()) {
     download_manager_delegate_.reset(new ShellDownloadManagerDelegate());
diff --git a/content/shell/browser/shell_browser_context.h b/content/shell/browser/shell_browser_context.h
index 07802ee955e8b4510cefdd2a388e5c1b2e3a0dfa..69f1259d6374cbaad69e434cb160ce62be478236 100644
--- a/content/shell/browser/shell_browser_context.h
+++ b/content/shell/browser/shell_browser_context.h
@@ -41,6 +41,7 @@ class ShellBrowserContext : public BrowserContext {
   scoped_ptr<ZoomLevelDelegate> CreateZoomLevelDelegate(
       const base::FilePath& partition_path) override;
   bool IsOffTheRecord() const override;
+  BrowserContext* GetOffTheRecordBrowserContext() override;
   DownloadManagerDelegate* GetDownloadManagerDelegate() override;
   net::URLRequestContextGetter* GetRequestContext() override;
   net::URLRequestContextGetter* GetRequestContextForRenderProcess(
